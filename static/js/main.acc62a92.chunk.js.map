{"version":3,"sources":["asset/font/Roboto-Bold.woff2","asset/font/Roboto-Bold.woff","asset/font/Roboto-Regular.woff2","asset/font/Roboto-Regular.woff","asset/logo-title.tsx","asset/logo-stab.tsx","asset/logo-gas-slow.tsx","asset/logo-gas-standard.tsx","asset/logo-gas-fast.tsx","asset/logo-gas-rapid.tsx","asset/tilde.tsx","asset/locale/en.ts","asset/logo-tweet.tsx","util/color-palette.ts","util/color-mode.ts","util/style-common.tsx","asset/loading-bars.tsx","util/use-window-size.tsx","util/use-locale.ts","component/timer.tsx","redux/slice/sliceGasStats.ts","redux/slice/sliceGasCounts.ts","redux/slice/sliceEthPrice.ts","redux/slice/sliceHistoricalGas.ts","redux/slice/sliceAverageGas.ts","redux/store.ts","redux/hook.ts","component/websocket-provider.tsx","component/gas-average.tsx","component/gas-counts.tsx","component/gas-historical.tsx","component/gas-stats.tsx","component/block-info.tsx","component/eth-price-social.tsx","App.tsx","asset/color-mode.tsx","reportWebVitals.ts","index.tsx"],"names":["LogoTitle","width","height","viewBox","fill","xmlns","id","x2","y2","className","offset","d","LogoStab","LogoGasSlow","x","y","transform","LogoGasStandard","LogoGasFast","LogoGasRapid","TildeIcon","version","preserveAspectRatio","stroke","en","header","eth","currency","title","gasStatTitle","gasStatDescription","nextBlock","knownTx","estTx","lastBlock","lastUpdate","gwei","txGasPriceAbove","pendingTxTitle","pendingTxDescription","rapid","fast","standard","slow","seconds","minutes","minute","histGasPrice","histGasPriceDescription","histSelectBlock","histSelectMinuteOne","histSelectMinuteTen","histSelectHourOne","histSelectDayOne","avgGasPrice","avgGasPriceDescription","btd","LogoTweet","gradientTransform","x1","y1","stopColor","stopOpacity","strokeWidth","color","convertHexToRGBA","hexCode","opacity","hex","replace","length","r","parseInt","substring","g","b","LS_KEY","WIDTH_TABLET","WIDTH_MOBILE","StyledLoadingBars","styled","xmlnsXlink","enableBackground","xmlSpace","attributeType","attributeName","type","values","begin","dur","repeatCount","StyledChartWrapper","div","StyledCenter","StyledSection","StyledSectionTitle","StyledSectionDescription","StyledColumnWrapper","StyledColumn","StyledDropdownControls","useWindowSize","useState","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useLocale","Timer","time","Math","floor","slice","sliceGasStats","createSlice","name","initialState","baseFeeGas","block","gasFast","gasRapid","gasSlow","gasStandard","txLenEst","txLenKnown","reducers","update","state","action","payload","updateGasStats","actions","selectGasStats","gasStats","selectBlockStats","reducerGasStats","reducer","sliceGasCounts","updateGasCounts","selectGasCounts","gasCounts","reducerGasCounts","sliceEthPrice","usd","_state","updateEthPrice","selectEthPriceUsd","ethPrice","reducerEthPrice","sliceHistoricalGas","payloadType","data","updateData","updatePayloadType","updateHistoricalGas","updateHistoricalGasType","selectHistoricalGas","gasHistorical","reducerHistoricalGas","sliceAverageGas","updateAverageGas","selectAverageGas","gasAverage","reducerAverageGas","store","configureStore","useAppDispatch","useDispatch","useAppSelector","useSelector","decodeFromBlob","blob","a","stream","decodeAsync","decode","arrayBuffer","logSocketError","err","console","error","WebsocketProvider","historicalPayloadType","dispatch","random","reconnectInterval","process","socketUrl","useWebSocket","shouldReconnect","_closeEvent","reconnectAttempts","sendMessage","lastMessage","readyState","historicalGasCmd","minute_1","minute_10","hour_1","day_1","useEffect","encode","s","isTrusted","then","message","t","map","gasPrice","count","c","toString","f","blocknumber","log","catch","GasAverage","colorModePref","locale","ref","useRef","chartType","setChartType","dataToBin","binData","setBinData","setWidth","windowWidth","margin","xMax","yMax","labelColor","lineColor","max","value","current","offsetWidth","bins","colorMax","useMemo","bucketSizeMax","binWidth","binHeight","bottomAxisScale","scaleTime","range","domain","xScale","scaleLinear","yScale","rectColorScale","opacityScale","formatHour","num","numZeros","n","abs","zeros","zeroString","pow","substr","zeroPad","tooltipStyles","defaultStyles","background","border","maxWidth","boxShadow","padding","lineHeight","useTooltip","tooltipData","tooltipLeft","tooltipTop","tooltipOpen","showTooltip","hideTooltip","handleTooltip","useCallback","event","localPoint","i0","i1","targetBin","future","binResult","dayResult","binNumberDay","lastDay","Date","getDate","binNumberHour","i","iLen","hour","push","bin","reverse","pop","StyledGasAverageHeader","StyledGasAverageTitleContainer","StyledPadding","Dropdown","align","Toggle","undefined","variant","Menu","Item","onClick","StyledChart","Group","left","HeatmapRect","colorScale","gap","heatmap","heatmapBins","fillOpacity","row","column","textAnchor","alignmentBaseline","dominantBaseline","AxisLeft","top","hideAxisLine","hideTicks","numTicks","scale","tickFormat","val","tickLabelProps","fontSize","AxisBottom","tickStroke","timeFormat","Bar","rx","onMouseMove","onMouseLeave","TooltipWithBounds","style","StyledInnerTooltip","StyledOverflow","StyledSvg","svg","GasHistorical","tooltipLineColor","circleColor","lineRapidColor","lineFastColor","formatDate","getX","getYRapid","getYFast","bisectX","bisector","extent","getOne","getTwo","paddingPerc","extentOne","extentTwo","extentCalc","extentMixedWithPadding","x0","invert","workingState","index","d0","d1","valueOf","circleLeft","circleFastTop","blockOrDate","optionsMap","StyledGasHistoricalHeader","StyledGasHistoricalTitleContainer","refX","Line","from","to","pointerEvents","strokeDasharray","LinePath","curve","curveMonotoneX","strokeOpacity","shapeRendering","onTouchStart","onTouchMove","cx","cy","StyledLegend","StyledLegendItem","GasStats","calculateTransferCost","gasPriceGwei","toFixed","txCostRapid","setTxCostRapid","txCostFast","setTxCostFast","txCostStandard","setTxCostStandard","txCostSlow","setTxCostSlow","document","GasPriceWrapper","GasPriceList","GasPrice","StyledLoadingBarsWrap","BlockInfo","timeLastBlock","setTimeLastBlock","timeLastUpdate","setTimeLastUpdate","blockTimerLast","setInterval","updateTimerLast","clearInterval","indicatorHeight","ceil","StyledTxIndicator","StyledZIndex","StyledBlockNumber","StyledFraction","StyledTimers","AnimIndicatorDone","keyframes","EthPriceSocial","usdPrice","StyledEthSocialContainer","StyledSocial","href","target","rel","StyledApp","Header","StyledGasCounts","enableHighTxFilter","cumulativeState","setCumulativeState","setRawState","cumulativeCount","cumulativeStateUnfiltered","averageGasPrice","reduce","cumulativeStateFiltered","filter","tooltipStylesFast","getGasPrice","getTxCount","bisectGasPrice","gasPriceScale","txCountScale","nice","LinearGradient","fromOpacity","toOpacity","rotate","AreaClosed","HeaderInner","ThemeToggle","StyledFooter","App","savedPref","localStorage","getItem","matchMedia","matches","setItem","prefersColorMode","setColorModePref","toggleColorMode","getFullYear","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Sentry","dsn","integrations","Integrations","BrowserTracing","tracesSampleRate","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.acc62a92.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Roboto-Bold.92fbd4e9.woff2\";","export default __webpack_public_path__ + \"static/media/Roboto-Bold.de0cae95.woff\";","export default __webpack_public_path__ + \"static/media/Roboto-Regular.64cfb66c.woff2\";","export default __webpack_public_path__ + \"static/media/Roboto-Regular.755dd4f3.woff\";","import React from 'react';\n\nexport function LogoTitle() {\n    return (\n        <svg width=\"105\" height=\"38\" viewBox=\"0 0 105 38\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <linearGradient id=\"gradient2\" x2=\"0%\" y2=\"100%\">\n                <stop className=\"start\" offset=\"0%\"/>\n                <stop className=\"end\" offset=\"100%\"/>\n            </linearGradient>\n            <path d=\"M1.37201 37.668L5.08001 33.78H13.972L17.464 37.668H1.37201ZM18.616 36.084L14.728 32.376V23.52L18.616 19.992V36.084ZM4.46801 21.288C3.62801 20.616 2.77601 19.956 1.91201 19.308L4.46801 17.4H14.296L16.816 19.308L14.296 21.288H4.46801ZM1.33601 1.09201H17.428L13.864 4.98001H5.04401L1.33601 1.09201ZM0.184006 18.732V2.64001L4.07201 6.13201V15.06L0.184006 18.732Z\" fill=\"black\"/>\n            <path d=\"M40.173 36.084L36.285 32.376V23.52L40.173 19.992V36.084ZM27.141 4.33201C26.301 3.66001 25.461 3.02401 24.621 2.42401L27.141 0.480011H49.245L51.765 2.42401L49.245 4.33201H40.065V18.732L36.177 15.24V6.34801L38.301 4.33201H27.141Z\" fill=\"black\"/>\n            <path d=\"M57.8779 19.992L61.7659 23.736V32.556L57.8779 36.084V19.992ZM76.2019 36.084L72.3139 32.376V23.52L76.2019 19.992V36.084ZM62.0539 21.288C61.2139 20.616 60.3619 19.956 59.4979 19.308L62.0539 17.4H71.8819L74.4019 19.308L71.8819 21.288H62.0539ZM58.9219 1.09201H75.0139L71.4499 4.98001H62.6299L58.9219 1.09201ZM57.7699 18.732V2.64001L61.6579 6.13201V15.06L57.7699 18.732ZM76.0939 2.64001V18.732L72.2059 15.24V6.34801L76.0939 2.64001Z\" fill=\"black\"/>\n            <path d=\"M87.7509 37.668L91.4589 33.78H100.351L103.843 37.668H87.7509ZM86.6709 19.992L90.5589 23.736V32.556L86.6709 36.084V19.992ZM104.995 36.084L101.107 32.376V23.52L104.995 19.992V36.084ZM90.8469 21.288C90.0069 20.616 89.1549 19.956 88.2909 19.308L90.8469 17.4H100.675L103.195 19.308L100.675 21.288H90.8469ZM87.7149 1.09201H103.807L100.243 4.98001H91.4229L87.7149 1.09201ZM86.5629 18.732V2.64001L90.4509 6.13201V15.06L86.5629 18.732ZM104.887 2.64001V18.732L100.999 15.24V6.34801L104.887 2.64001Z\" fill=\"black\"/>\n        </svg>\n    );\n}","import React from 'react';\n\nexport function LogoStab() {\n    return (\n        <svg width=\"371\" height=\"327\" viewBox=\"0 0 371 327\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <linearGradient id=\"gradient\" x2=\"0%\" y2=\"100%\">\n                <stop className=\"start\" offset=\"0%\"/>\n                <stop className=\"end\" offset=\"100%\"/>\n            </linearGradient>\n            <path fill=\"url(#gradient)\" d=\"M99.5 0.78125L0.28125 167.469L99.5 227L198.719 167.469L99.5 0.78125ZM0.28125 187.312L99.5 326.219L198.719 187.312L99.5 246.844L0.28125 187.312Z\" />\n            <path fill=\"url(#gradient)\" d=\"M266.288 47.4293L254.681 59.0366L266.288 70.644L254.681 82.2513L266.288 93.8586L254.681 105.466L266.288 117.073L254.681 128.681L266.288 140.288L254.681 151.895L266.288 163.503L243.073 186.717L231.466 175.11L208.251 198.325L243.073 233.146L254.681 221.539L277.895 244.754L266.288 256.361L277.895 267.968L254.681 291.183L289.502 326.005L324.324 291.183L301.11 267.968L312.717 256.361L301.11 244.754L324.324 221.539L335.932 233.146L370.754 198.325L347.539 175.11L335.932 186.717L312.717 163.503L324.324 151.895L312.717 140.288L324.324 128.681L312.717 117.073L324.324 105.466L312.717 93.8586L324.324 82.2513L312.717 70.644L324.324 59.0366L312.717 47.4293L324.324 35.822L289.502 1L254.681 35.822L266.288 47.4293ZM312.717 47.4293L301.11 59.0366L312.717 70.644L301.11 82.2513L312.717 93.8586L301.11 105.466L312.717 117.073L301.11 128.681L312.717 140.288L301.11 151.895L312.717 163.503L289.502 186.717L301.11 198.325L312.717 186.717L324.324 198.325L335.932 186.717L347.539 198.325L324.324 221.539L312.717 209.932L289.502 233.146L301.11 244.754L289.502 256.361L301.11 267.968L289.502 279.576L301.11 291.183L289.502 302.79L277.895 291.183L289.502 279.576L277.895 267.968L289.502 256.361L277.895 244.754L289.502 233.146L266.288 209.932L254.681 221.539L231.466 198.325L243.073 186.717L254.681 198.325L266.288 186.717L277.895 198.325L289.502 186.717L266.288 163.503L277.895 151.895L266.288 140.288L277.895 128.681L266.288 117.073L277.895 105.466L266.288 93.8586L277.895 82.2513L266.288 70.644L277.895 59.0366L266.288 47.4293L289.502 24.2147L312.717 47.4293Z\" />\n        </svg>\n    );\n}","import React from 'react';\n\nexport function LogoGasSlow() {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1100 1100\">\n            <path d=\"M224.8,755.93h98.5l40.18-40.19L325,677.24l-40.83,40.83a298.77,298.77,0,0,1-34.48-140c0-5.59.17,6.42.47.88h67.15V524.53H258.12c12-49.61,36.54-112.94,72.05-151l46.62,46.62,38.5-38.5-44.55-44.55A297.33,297.33,0,0,1,521,279.15V343.2h54.45V278.85a297.46,297.46,0,0,1,156.78,60.5L690,381.62l38.5,38.5,43.89-43.89c33.94,37.31,57.52,99.33,69.3,147.43H781.83V578.1h68c.34,5.83.53-5.88.53,0a298.79,298.79,0,0,1-33.88,138.82L775.9,676.37l-38.5,38.49,41.06,41.07h96.73A370.28,370.28,0,0,0,812,316.06q-13.15-13.14-27.4-24.82l-2.14-2.14-.23.23A370.58,370.58,0,0,0,224.8,755.93Z\"/>\n            <rect x=\"319.92\" y=\"823.1\" width=\"456.64\" height=\"69.37\" transform=\"translate(1096.49 1715.58) rotate(180)\"/>\n            <path d=\"M495.4,559.49,365.15,615,508,616a55.32,55.32,0,1,0-12.59-56.54Z\"/>\n        </svg>\n    );\n}","import React from 'react';\n\nexport function LogoGasStandard() {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1100 1100\">\n            <path d=\"M224.8,755.93h98.5l40.18-40.19L325,677.24l-40.83,40.83a298.77,298.77,0,0,1-34.48-140c0-5.59.17,6.42.47.88h67.15V524.53H258.12c12-49.61,36.54-112.94,72.05-151l46.62,46.62,38.5-38.5-44.55-44.55A297.33,297.33,0,0,1,521,279.15V343.2h54.45V278.85a297.46,297.46,0,0,1,156.78,60.5L690,381.62l38.5,38.5,43.89-43.89c33.94,37.31,57.52,99.33,69.3,147.43H781.83V578.1h68c.34,5.83.53-5.88.53,0a298.79,298.79,0,0,1-33.88,138.82L775.9,676.37l-38.5,38.49,41.06,41.07h96.73A370.28,370.28,0,0,0,812,316.06q-13.15-13.14-27.4-24.82l-2.14-2.14-.23.23A370.58,370.58,0,0,0,224.8,755.93Z\"/>\n            <rect x=\"319.92\" y=\"823.1\" width=\"456.64\" height=\"69.37\" transform=\"translate(1096.49 1715.58) rotate(180)\"/>\n            <path d=\"M576.19,530.55,547.37,391.93,518.28,531.79a55.33,55.33,0,1,0,57.91-1.24Z\"/>\n        </svg>\n    );\n}","import React from 'react';\n\nexport function LogoGasFast() {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1100 1100\">\n            <path d=\"M224.8,755.93h98.5l40.18-40.19L325,677.24l-40.83,40.83a298.77,298.77,0,0,1-34.48-140c0-5.59.17,6.42.47.88h67.15V524.53H258.12c12-49.61,36.54-112.94,72.05-151l46.62,46.62,38.5-38.5-44.55-44.55A297.33,297.33,0,0,1,521,279.15V343.2h54.45V278.85a297.46,297.46,0,0,1,156.78,60.5L690,381.62l38.5,38.5,43.89-43.89c33.94,37.31,57.52,99.33,69.3,147.43H781.83V578.1h68c.34,5.83.53-5.88.53,0a298.79,298.79,0,0,1-33.88,138.82L775.9,676.37l-38.5,38.49,41.06,41.07h96.73A370.28,370.28,0,0,0,812,316.06q-13.15-13.14-27.4-24.82l-2.14-2.14-.23.23A370.58,370.58,0,0,0,224.8,755.93Z\"/>\n            <rect x=\"319.92\" y=\"823.1\" width=\"456.64\" height=\"69.37\" transform=\"translate(1096.49 1715.58) rotate(180)\"/>\n            <path d=\"M596.12,608.14l138.62-28.83L594.88,550.22a55.32,55.32,0,1,0,1.24,57.92Z\"/>\n        </svg>\n    );\n}","import React from 'react';\n\nexport function LogoGasRapid() {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1100 1100\">\n            <rect x=\"319.92\" y=\"823.1\" width=\"456.64\" height=\"69.37\" transform=\"translate(1096.49 1715.58) rotate(180)\"/>\n            <path d=\"M567.77,631.45l126.81,63-92-109.26a55.32,55.32,0,1,0-34.8,46.3Z\"/>\n            <path d=\"M891.44,433.84A369.21,369.21,0,0,0,812,316.06q-13.15-13.14-27.4-24.82l-2.14-2.14-.23.23a369.42,369.42,0,0,0-167.66-76.21C579.53,162.34,485.87,114.21,413,108,240.59,93.3,68.22,59.48,73,39,59.66,96.16,108,185,193,203c123.86,26.23,65,79,42,94,0,0-88.27,60.46-73-22,5-27,3.81-50.72-89-77,71.35,67.11-44.08,160.13,115.89,296.43a370.23,370.23,0,0,0,35.91,261.5h98.5l40.18-40.19L325,677.24l-40.83,40.83a298.77,298.77,0,0,1-34.48-140c0-5.59.17,6.42.47.88h67.15V524.53H258.12c12-49.61,36.54-112.94,72.05-151l46.62,46.62,38.5-38.5-44.55-44.55A297.33,297.33,0,0,1,521,279.15V343.2h54.45V278.85a297.46,297.46,0,0,1,156.78,60.5L690,381.62l38.5,38.5,43.89-43.89c33.94,37.31,57.52,99.33,69.3,147.43H781.83V578.1h68c.34,5.83.53-5.88.53,0a298.79,298.79,0,0,1-33.88,138.82L775.9,676.37l-38.5,38.49,41.06,41.07h96.73a371.32,371.32,0,0,0,16.25-322.09Z\"/>\n        </svg>\n    );\n}","import React from 'react';\n\nexport function TildeIcon() {\n    return (\n        <svg \n            version=\"1.0\" \n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"1280.000000pt\" \n            height=\"424.000000pt\" \n            viewBox=\"0 0 1280.000000 424.000000\"\n            preserveAspectRatio=\"xMidYMid meet\"\n        >\n            <g transform=\"translate(0.000000,424.000000) scale(0.100000,-0.100000)\" stroke=\"none\">\n                <path d=\"M8330 4234 c-408 -26 -688 -67 -994 -146 -450 -114 -807 -269 -1161 -503 -279 -185 -487 -374 -810 -735 -328 -367 -480 -499 -706 -615 -460 -236 -1082 -257 -1851 -64 -387 97 -674 196 -1418 491 -451 178 -655 256 -870 329 -155 54 -421 133 -482 144 l-38 7 0 -1150 c0 -1087 1 -1151 18 -1156 9 -3 91 -21 180 -41 200 -45 461 -114 947 -250 1214 -341 1751 -454 2475 -521 233 -22 836 -25 1045 -6 793 74 1452 287 1995 646 268 178 478 361 775 676 333 354 462 471 640 580 464 285 1124 324 1938 116 345 -89 633 -188 1217 -418 837 -330 1015 -395 1320 -483 102 -29 200 -56 218 -60 l32 -7 -2 1158 -3 1158 -40 9 c-193 41 -692 173 -1130 297 -1230 350 -1748 460 -2464 526 -156 14 -709 26 -831 18z\"/>\n            </g>\n        </svg>\n    );\n}","export const en = {\n    header: 'ETH Gas Price Forecast System',\n    eth: 'ETH',\n    currency: '$',\n    title: 'Gwei | STAB | ETH Gas Price Forecast System',\n    gasStatTitle: 'Gas Price (Gwei)',\n    gasStatDescription: 'Based On Pending Transaction of ETH Mempool',\n    nextBlock: 'Next Block',\n    knownTx: 'Known tx:',\n    estTx: 'Est. tx:',\n    lastBlock: 'Last block:',\n    lastUpdate: 'Last update:',\n    gwei: 'Gwei',\n    txGasPriceAbove: 'txs with gas price above',\n    pendingTxTitle: 'Pending Transactions',\n    pendingTxDescription: 'X axis: Gas Price (Gwei), Y axis: Cumulative number of transactions',\n    rapid: 'Rapid',\n    fast: 'Fast',\n    standard: 'Standard',\n    slow: 'Slow',\n    seconds: 'Seconds',\n    minutes: 'Minutes',\n    minute: 'Minute',\n    histGasPrice: 'Historical Gas Price',\n    histGasPriceDescription: 'Rapid/Fast: the arithmetic average value of gas prices for blocks mined within a given interval',\n    histSelectBlock: 'Latest Block',\n    histSelectMinuteOne: '1 Minute',\n    histSelectMinuteTen: '10 Minutes',\n    histSelectHourOne: '1 Hour',\n    histSelectDayOne: '1 Day',\n    avgGasPrice: 'Average Gas Price',\n    avgGasPriceDescription: 'Average hourly gas price adjusted to your timezone',\n    btd: 'buy the dip',\n};","import React from 'react';\n\nexport function LogoTweet() {\n    return (\n        <svg width=\"36\" height=\"36\" viewBox=\"0 0 36 36\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <defs>\n                <linearGradient id=\"hover-gradient-light\" gradientTransform=\"rotate(0)\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"0%\" stopColor=\"#1da1f1\" stopOpacity=\"0.7\" />\n                    <stop offset=\"100%\" stopColor=\"#0060ff\" stopOpacity=\"0.8\" />\n                </linearGradient>\n                <linearGradient id=\"hover-gradient-dark\" gradientTransform=\"rotate(-90)\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"0%\" stopColor=\"#1da1f1\" stopOpacity=\"0.8\" />\n                    <stop offset=\"100%\" stopColor=\"#41ff58\" stopOpacity=\"0.2\" />\n                </linearGradient>\n                <linearGradient id=\"hover-gradient-stroke\" gradientTransform=\"rotate(90)\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"0%\" stopColor=\"#1da1f1\" stopOpacity=\"0.8\" />\n                    <stop offset=\"100%\" stopColor=\"#41ff58\" stopOpacity=\"0.2\" />\n                </linearGradient>\n            </defs>\n            <path className=\"bg\" d=\"M18 33.814C26.7338 33.814 33.814 26.7338 33.814 18C33.814 9.2662 26.7338 2.18605 18 2.18605C9.2662 2.18605 2.18605 9.2662 2.18605 18C2.18605 26.7338 9.2662 33.814 18 33.814Z\" fill=\"black\" stroke=\"white\" strokeWidth=\"2\"/>\n            <path className=\"birb\" d=\"M15.1061 26.3419C22.1195 26.3419 25.9544 20.5302 25.9544 15.4935C25.9544 15.3274 25.9544 15.1614 25.9465 15.0033C26.6898 14.4656 27.3381 13.7935 27.8521 13.0265C27.1721 13.327 26.4368 13.5326 25.6619 13.6274C26.4526 13.153 27.0535 12.4098 27.3381 11.5163C26.6028 11.9512 25.7884 12.2674 24.9186 12.4414C24.2228 11.6981 23.2344 11.2395 22.1354 11.2395C20.0321 11.2395 18.3242 12.9474 18.3242 15.0507C18.3242 15.3512 18.3558 15.6437 18.427 15.9205C15.2563 15.7623 12.4493 14.2442 10.5674 11.9353C10.2433 12.4967 10.0535 13.153 10.0535 13.8488C10.0535 15.1693 10.7256 16.3395 11.7535 17.0195C11.1288 17.0037 10.5437 16.8298 10.0298 16.5451C10.0298 16.5609 10.0298 16.5767 10.0298 16.5926C10.0298 18.4428 11.3423 19.9767 13.0898 20.3326C12.7735 20.4195 12.4335 20.467 12.0856 20.467C11.8405 20.467 11.6033 20.4433 11.3661 20.3958C11.8484 21.914 13.2558 23.013 14.9242 23.0446C13.6195 24.0646 11.9749 24.6735 10.1879 24.6735C9.87954 24.6735 9.57908 24.6577 9.27861 24.6181C10.947 25.7093 12.9554 26.3419 15.1061 26.3419Z\" fill=\"white\"/>\n        </svg>\n    );\n} \n\n// src:\n/* <svg width=\"36\" height=\"36\" viewBox=\"0 0 36 36\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M18 33.814C26.7338 33.814 33.814 26.7338 33.814 18C33.814 9.2662 26.7338 2.18605 18 2.18605C9.2662 2.18605 2.18605 9.2662 2.18605 18C2.18605 26.7338 9.2662 33.814 18 33.814Z\" fill=\"black\" stroke=\"white\" stroke-width=\"4\"/>\n<path d=\"M15.1061 26.3419C22.1195 26.3419 25.9544 20.5302 25.9544 15.4935C25.9544 15.3274 25.9544 15.1614 25.9465 15.0033C26.6898 14.4656 27.3381 13.7935 27.8521 13.0265C27.1721 13.327 26.4368 13.5326 25.6619 13.6274C26.4526 13.153 27.0535 12.4098 27.3381 11.5163C26.6028 11.9512 25.7884 12.2674 24.9186 12.4414C24.2228 11.6981 23.2344 11.2395 22.1354 11.2395C20.0321 11.2395 18.3242 12.9474 18.3242 15.0507C18.3242 15.3512 18.3558 15.6437 18.427 15.9205C15.2563 15.7623 12.4493 14.2442 10.5674 11.9353C10.2433 12.4967 10.0535 13.153 10.0535 13.8488C10.0535 15.1693 10.7256 16.3395 11.7535 17.0195C11.1288 17.0037 10.5437 16.8298 10.0298 16.5451C10.0298 16.5609 10.0298 16.5767 10.0298 16.5926C10.0298 18.4428 11.3423 19.9767 13.0898 20.3326C12.7735 20.4195 12.4335 20.467 12.0856 20.467C11.8405 20.467 11.6033 20.4433 11.3661 20.3958C11.8484 21.914 13.2558 23.013 14.9242 23.0446C13.6195 24.0646 11.9749 24.6735 10.1879 24.6735C9.87954 24.6735 9.57908 24.6577 9.27861 24.6181C10.947 25.7093 12.9554 26.3419 15.1061 26.3419Z\" fill=\"white\"/>\n</svg> */\n\n","export const color = {\n    font: '#333333',\n    fontDark: '#fbfbfb',\n    background: '#f9f6f6',\n    backgroundDark: '#0f1011',\n    header: '#ffffff',\n    headerDark: '#181a1b',\n    sectionBackground: '#ffffff',\n    sectionBackgroundDark: '#181a1b',\n    green: '#00c718',\n    greenDark: '#41ff58',\n    orange: '#ff7828',\n    orangeDark: '#f67a30',\n    blue: '#0060ff',\n    blueDark: '#339aff',\n    purple: '#9160f2',\n    purpleDark: '#9161f2',\n    badgeBackground: '#ebebeb',\n    badgeBackgroundDark: '#303132',\n    socialBlue: '#1da1f1',\n    socialPurple: '#8596f6',\n};\n\n\nexport const convertHexToRGBA = (hexCode: string, opacity: number) => {\n    let hex = hexCode.replace('#', '');\n    \n    if (hex.length === 3) {\n        hex = `${hex[0]}${hex[0]}${hex[1]}${hex[1]}${hex[2]}${hex[2]}`;\n    }    \n    \n    const r = parseInt(hex.substring(0, 2), 16);\n    const g = parseInt(hex.substring(2, 4), 16);\n    const b = parseInt(hex.substring(4, 6), 16);\n\n    return `rgba(${r},${g},${b},${opacity})`;\n};","const LS_KEY = 'colorPref';\n\n/**\n * get color pref from localStorage, else get it from user preferences then set it as such\n * @returns string\n */\nexport function prefersColorMode() {\n    const savedPref = localStorage.getItem(LS_KEY);\n    if (savedPref === 'light' || savedPref === 'dark') {\n        return savedPref;\n    } else {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            localStorage.setItem(LS_KEY, 'dark');\n            return 'dark';\n        } else {\n            localStorage.setItem(LS_KEY, 'light');\n            return 'light';\n        }\n    }\n}\n\n\nexport function toggleColorMode() {\n    const savedPref = localStorage.getItem(LS_KEY);\n\n    if (savedPref === 'light') {\n        localStorage.setItem(LS_KEY, 'dark');\n        return 'dark';\n    } else if (savedPref === 'dark') {\n        localStorage.setItem(LS_KEY, 'light');\n        return 'light';\n    } else if (!savedPref) {\n        localStorage.setItem(LS_KEY, 'dark');\n    }\n    \n    return 'dark';\n}","import styled from '@emotion/styled';\nimport {\n    LoadingBars\n} from '../asset';\nimport { color, convertHexToRGBA } from './';\n\nexport const WIDTH_TABLET = '768px';\nexport const WIDTH_MOBILE = '640px';\n\nexport const StyledLoadingBars = styled(LoadingBars)`\n    height: 30px;\n    width: 24px;\n    display: none;\n\n    &.loading {\n        display: inline-block;\n    }\n`;\n\nexport const StyledChartWrapper = styled.div`\n    position: relative;\n    height: 100%;\n    width: 100%;\n`;\n\nexport const StyledCenter = styled.div`\n    width: 100%;\n    height: 100%;\n    max-width: 1200px;\n    padding: 0 15px;\n    margin: 0 auto 16px auto;\n`;\n\nexport const StyledSection = styled.div`\n    padding: 30px;\n    margin-top: 15px;\n    border-radius: 6px;\n\n    background: ${color.sectionBackground};\n\n    .mode-dark & {\n        background: ${color.sectionBackgroundDark};\n    }\n`;\n\nexport const StyledSectionTitle = styled.div`\n    text-align: center;\n    font-size: 22px;\n    display: block;\n\n    &.pad-top {\n        margin-top: 40px;\n    }\n\n    @media only screen and (max-width: ${WIDTH_TABLET}) {\n        text-align: left;\n        font-size: 16px;\n\n        &.tablet-except {\n            text-align: center;\n        }\n    }\n\n    @media only screen and (max-width: ${WIDTH_MOBILE}) {\n        &.tablet-except {\n            text-align: left;\n        }\n    }\n`;\n\nexport const StyledSectionDescription = styled.div`\n    margin-top: 8px;\n    text-align: center;\n    opacity: 0.5;\n    font-size: 14px;\n    display: block;\n\n    @media only screen and (max-width: ${WIDTH_TABLET}) {\n        text-align: left;\n        font-size: 14px;\n\n        &.tablet-except {\n            text-align: center;\n        }\n    }\n\n    @media only screen and (max-width: ${WIDTH_MOBILE}) {\n        &.tablet-except {\n            text-align: left;\n        }\n    }\n`;\n\nexport const StyledColumnWrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    justify-content: flex-start;\n    align-items: stretch;\n\n    @media only screen and (max-width: ${WIDTH_MOBILE}) {\n        flex-direction: column;\n    }\n`;\n\nexport const StyledColumn = styled.div`\n    padding: 30px;\n    order: 0;\n    background: ${color.sectionBackground};\n    margin-top: 15px;\n    border-radius: 6px;\n\n    .mode-dark & {\n        background: ${color.sectionBackgroundDark};\n    }\n\n    &.one-third {\n        position: relative;\n        overflow: hidden;\n        max-width: 240px;\n        min-width: 230px;\n        flex: 1 1 auto;\n        align-self: auto;\n\n        @media only screen and (max-width: ${WIDTH_MOBILE}) {\n            flex: 0 1 auto;\n            max-width: none;\n        }\n    }\n    &.two-third {\n        margin-left: 15px;\n        padding: 30px 20px;\n        flex: 2 1 auto;\n        align-self: auto;\n        overflow: hidden;\n\n        @media only screen and (max-width: ${WIDTH_MOBILE}) {\n            flex: 0 1 auto;\n            margin-left: 0px;\n        }\n    }\n`;\n\nexport const StyledDropdownControls = styled.div`\n    padding-left: 20px;\n    .dropdown-controls {\n        .dropdown-toggle.btn {\n            box-shadow: none;\n            border-color: transparent;\n        }\n        a.dropdown-item:active {\n            background: ${convertHexToRGBA(color.orange, 0.5)};\n        }\n    }\n\n    button {\n        transition: all 0s linear 0s;\n    }\n\n    .mode-dark & {\n        .dropdown-controls {\n            .dropdown-toggle.btn {\n                background: ${color.backgroundDark};\n                &:focus {\n                    box-shadow: 0 0 0 1px rgba(255,255,255,0.5);\n                }\n            }\n            a.dropdown-item:active {\n                background: ${convertHexToRGBA(color.orangeDark, 0.3)};\n            }\n        }\n    }\n\n    .mode-light & {\n        .dropdown-controls {\n            .dropdown-toggle.btn {\n                background: ${color.background};\n                color: ${color.font};\n                &:focus {\n                    box-shadow: 0 0 0 1px rgba(51, 51, 51,0.5);\n                }\n            }\n        }\n    }\n`;","import React from 'react';\n\ntype LoadingBarsOptions = {\n    className?: string;\n}\n\nexport function LoadingBars({ className }: LoadingBarsOptions) {\n    return (\n        <svg \n            version=\"1.1\" \n            xmlns=\"http://www.w3.org/2000/svg\" \n            xmlnsXlink=\"http://www.w3.org/1999/xlink\" \n            x=\"0px\" \n            y=\"0px\"\n            viewBox=\"0 0 24 30\" \n            enableBackground=\"new 0 0 0 0\" \n            xmlSpace=\"preserve\"\n            className={className}\n        >\n            <rect x=\"0\" y=\"0\" width=\"4\" height=\"10\" fill=\"#fff\">\n            <animateTransform attributeType=\"xml\"\n                attributeName=\"transform\" type=\"translate\"\n                values=\"0 0; 0 20; 0 0\"\n                begin=\"0\" dur=\"0.6s\" repeatCount=\"indefinite\" />\n            </rect>\n            <rect x=\"10\" y=\"0\" width=\"4\" height=\"10\" fill=\"#fff\">\n            <animateTransform attributeType=\"xml\"\n                attributeName=\"transform\" type=\"translate\"\n                values=\"0 0; 0 20; 0 0\"\n                begin=\"0.1s\" dur=\"0.6s\" repeatCount=\"indefinite\" />\n            </rect>\n            <rect x=\"20\" y=\"0\" width=\"4\" height=\"10\" fill=\"#fff\">\n            <animateTransform attributeType=\"xml\"\n                attributeName=\"transform\" type=\"translate\"\n                values=\"0 0; 0 20; 0 0\"\n                begin=\"0.2s\" dur=\"0.6s\" repeatCount=\"indefinite\" />\n            </rect>\n        </svg>\n    );\n}\n\n","import { useState, useLayoutEffect } from 'react';\n\nexport function useWindowSize() {\n    const [size, setSize] = useState([0, 0]);\n    useLayoutEffect(() => {\n      function updateSize() {\n        setSize([window.innerWidth, window.innerHeight]);\n      }\n      window.addEventListener('resize', updateSize);\n      updateSize();\n      return () => window.removeEventListener('resize', updateSize);\n    }, []);\n    return size;\n}","import { useState } from 'react';\nimport { en } from '../asset';\n\nexport function useLocale() {\n    // locale-switching logic would go here\n    const [locale, ] = useState(en);\n\n    return locale;\n}","import React from 'react';\n\ntype TimerOptions = {\n    readonly time: number;\n}\n\nexport function Timer({ time }: TimerOptions) {\n    return (\n        <div className=\"timer\">\n            <span className=\"digits\">\n                {(\"0\" + Math.floor((time / 60000) % 60)).slice(-2)}:\n            </span>\n            <span className=\"digits\">\n                {(\"0\" + Math.floor((time / 1000) % 60)).slice(-2)}.\n            </span>\n            <span className=\"digits mili-sec\">\n                {(\"0\" + ((time / 10) % 100)).slice(-2)}\n            </span>\n        </div>\n    );\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport type { RootState } from '../store';\n\n// Types\ntype GasStatsState = {\n    readonly baseFeeGas: number;\n    readonly block: number;\n    readonly gasFast: number;\n    readonly gasRapid: number;\n    readonly gasSlow: number;\n    readonly gasStandard: number;\n    readonly txLenEst: number;\n    readonly txLenKnown: number;\n};\n\n// Initial State\nconst initialState = {\n    baseFeeGas: 0,\n    block: 0,\n    gasFast: 0,\n    gasRapid: 0,\n    gasSlow: 0,\n    gasStandard: 0,\n    txLenEst: 0,\n    txLenKnown: 0,\n} as GasStatsState;\n\nexport const sliceGasStats = createSlice({\n    name: 'gasStats',\n    // `createSlice` will infer the state type from the `initialState` argument\n    initialState,\n    reducers: {\n        // Use the PayloadAction type to declare the contents of `action.payload`\n        update: (state, action: PayloadAction<GasStatsState>) => {\n            return action.payload;\n        },\n    },\n});\n\nexport const { update: updateGasStats } = sliceGasStats.actions;\nexport const selectGasStats = (state: RootState) => state.gasStats;\nexport const selectBlockStats = (state: RootState) => {\n    return {\n        txLenEst: state.gasStats.txLenEst,\n        txLenKnown: state.gasStats.txLenKnown,\n        block: state.gasStats.block\n    }\n};\nexport const { reducer: reducerGasStats } = sliceGasStats;\n\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport type { RootState } from '../store';\n\n// Types\ntype GasCountsState = {\n    readonly gasPrice: number;\n    readonly count: number;\n}[];\n\n// Initial State\nconst initialState = [] as GasCountsState;\n\nexport const sliceGasCounts = createSlice({\n    name: 'gasCounts',\n    // `createSlice` will infer the state type from the `initialState` argument\n    initialState,\n    reducers: {\n        // Use the PayloadAction type to declare the contents of `action.payload`\n        update: (state, action: PayloadAction<GasCountsState>) => {\n            return action.payload;\n        },\n    },\n});\n\nexport const { update: updateGasCounts } = sliceGasCounts.actions;\nexport const selectGasCounts = (state: RootState) => state.gasCounts;\nexport const { reducer: reducerGasCounts } = sliceGasCounts;\n\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport type { RootState } from '../store';\n\n// Types\ntype EthPriceState = {\n    readonly usd: number;\n};\n\n// Initial State\nconst initialState = { usd: 0 } as EthPriceState;\n\nexport const sliceEthPrice = createSlice({\n    name: 'ethPrice',\n    // `createSlice` will infer the state type from the `initialState` argument\n    initialState,\n    reducers: {\n        // Use the PayloadAction type to declare the contents of `action.payload`\n        update: (_state, action: PayloadAction<EthPriceState>) => {\n            return action.payload;\n        },\n    },\n}); \n\nexport const { update: updateEthPrice } = sliceEthPrice.actions;\nexport const selectEthPriceUsd = (state: RootState) => state.ethPrice.usd;\nexport const { reducer: reducerEthPrice } = sliceEthPrice;\n\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport type { RootState } from '../store';\n\n// Types\ntype DataBaseType = {\n    readonly rapid: number;\n    readonly fast: number;\n    // readonly txKnown: number;\n    // readonly txEst: number;\n}\n\ntype HistoricalGasTimeDataType = {\n    readonly time: number;\n} & DataBaseType;\ntype HistoricalGasTimeType = {\n    readonly payloadType: 'minute_1' | 'minute_10' | 'hour_1' | 'day_1';\n    readonly data: HistoricalGasTimeDataType[];\n}\n\ntype HistoricalGasBlockDataType = {\n    readonly blocknumber: string;\n} & DataBaseType;\ntype HistoricalGasBlockType = {\n    readonly payloadType: 'block';\n    readonly data: HistoricalGasBlockDataType[];\n};\n\ntype HistoricalGasState = HistoricalGasTimeType | HistoricalGasBlockType;\n\n// Initial State\nconst initialState = {\n    payloadType: 'block',\n    data: []\n} as HistoricalGasState;\n\nexport const sliceHistoricalGas = createSlice({\n    name: 'gasHistorical',\n    // `createSlice` will infer the state type from the `initialState` argument\n    initialState,\n    reducers: {\n        // Use the PayloadAction type to declare the contents of `action.payload`\n        updateData: (state, action: PayloadAction<HistoricalGasBlockDataType[] | HistoricalGasTimeDataType[]>) => {\n            state.data = action.payload;\n            \n        },\n        updatePayloadType: (state, action: PayloadAction<HistoricalGasBlockType['payloadType'] | HistoricalGasTimeType['payloadType']>) => {\n            state.payloadType = action.payload;\n        },\n    },\n});\n\nexport const { \n    updateData: updateHistoricalGas,\n    updatePayloadType: updateHistoricalGasType\n} = sliceHistoricalGas.actions;\nexport const selectHistoricalGas = (state: RootState) => state.gasHistorical;\nexport const { reducer: reducerHistoricalGas } = sliceHistoricalGas;\n\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport type { RootState } from '../store';\n\n// Types\ntype AverageGasDataType = {\n    readonly time: number;\n    readonly rapid: number;\n    readonly fast: number;\n    // readonly txKnown: number;\n    // readonly txEst: number;\n};\n\ntype AverageGasType = {\n    readonly payloadType: 'hour_1';\n    readonly data: AverageGasDataType[];\n};\n\n\n// Initial State\nconst initialState = {\n    payloadType: 'hour_1',\n    data: []\n} as AverageGasType;\n\nexport const sliceAverageGas = createSlice({\n    name: 'gasAverage',\n    initialState,\n    reducers: {\n        // Use the PayloadAction type to declare the contents of `action.payload`\n        updateData: (state, action: PayloadAction<AverageGasDataType[]>) => {\n            state.data = action.payload;\n        }\n    },\n});\n\nexport const { \n    updateData: updateAverageGas,\n} = sliceAverageGas.actions;\nexport const selectAverageGas = (state: RootState) => state.gasAverage;\nexport const { reducer: reducerAverageGas } = sliceAverageGas;\n\n","import { configureStore } from '@reduxjs/toolkit';\nimport {\n    reducerGasStats,\n    reducerGasCounts,\n    reducerEthPrice,\n    reducerHistoricalGas,\n    reducerAverageGas\n} from './slice';\n\nexport const store = configureStore({\n    reducer: {\n        gasStats: reducerGasStats,\n        gasCounts: reducerGasCounts,\n        ethPrice: reducerEthPrice,\n        gasHistorical: reducerHistoricalGas,\n        gasAverage: reducerAverageGas\n    }\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import React, { useState, useEffect } from 'react';\nimport useWebSocket/*, { ReadyState }*/ from 'react-use-websocket';\nimport { decode, decodeAsync, encode } from \"@msgpack/msgpack\";\nimport { \n    useAppDispatch, \n    useAppSelector, \n    selectHistoricalGas,\n    updateGasStats,\n    updateGasCounts,\n    updateEthPrice,\n    updateHistoricalGas,\n    updateAverageGas,\n} from '../redux';\n\n\nasync function decodeFromBlob(blob: Blob): Promise<{[key: string]: any}> {\n    if (blob.stream) {\n      // Blob#stream(): ReadableStream<Uint8Array> (recommended)\n      return await decodeAsync(blob.stream()) as Promise<{[key: string]: any}>;\n    } else {\n      // Blob#arrayBuffer(): Promise<ArrayBuffer> (if stream() is not available)\n      return decode(await blob.arrayBuffer()) as Promise<{[key: string]: any}>;\n    }\n  }\n\nfunction logSocketError(err: any) {\n    console.error(err);\n}\n\n\nexport function WebsocketProvider() {\n    const { \n        payloadType: historicalPayloadType\n    } = useAppSelector(selectHistoricalGas);\n    const dispatch = useAppDispatch();\n    const [reconnectInterval, ] = useState((Math.floor(Math.random() * (15 - 8 + 1)) + 8) * 1000); // 8-15s\n    const [socketUrl, ] = useState(process.env.REACT_APP_WS_API || '');\n\n    const {\n        sendMessage,\n        lastMessage,\n        readyState,\n    } = useWebSocket(\n        socketUrl,\n        {\n            shouldReconnect: (_closeEvent) => true,\n            reconnectAttempts: 20,\n            reconnectInterval // 15s max, 300s total max\n        }\n    );\n    \n    // const connectionStatus = {\n    //     [ReadyState.CONNECTING]: 'Connecting',\n    //     [ReadyState.OPEN]: 'Open',\n    //     [ReadyState.CLOSING]: 'Closing',\n    //     [ReadyState.CLOSED]: 'Closed',\n    //     [ReadyState.UNINSTANTIATED]: 'Uninstantiated',\n    // }[readyState];\n\n    const historicalGasCmd = {\n        block: 'hb',\n        minute_1: 'hm1', \n        minute_10: 'hm10',\n        hour_1: 'hh1',\n        day_1: 'hd1'\n    }\n\n    useEffect(() => {\n        // console.log(`ws: ${connectionStatus}`);\n        if (readyState === 1) {\n            sendMessage(\n                encode(\n                    {s: historicalGasCmd[historicalPayloadType]}\n                )\n            );\n            sendMessage(\n                encode({a: 'aw'})\n            );\n        }\n    }, [readyState]);\n\n    useEffect(() => {\n        if (readyState === 1) {\n            sendMessage(\n                encode({s: historicalGasCmd[historicalPayloadType]})\n            );\n        } \n    }, [historicalPayloadType]);\n\n    useEffect(() => {\n        let data: any = {};\n        if (lastMessage !== null && lastMessage.isTrusted && lastMessage.data) {\n\n            decodeFromBlob(lastMessage.data)\n            .then((message) => {\n                if (message?.d && message?.t) {\n                    // data = parseMessageData(message.d);\n                    data = message.d;\n                    // console.log(data);\n    \n                    if (message.t === 'gc') {\n                        if (!!data.map) {\n                            dispatch(updateGasCounts(data.map((d: any) => { return {gasPrice: d.g, count: d.c}})));\n                        }\n                    } else if (message.t === 'gs') {\n                        dispatch(updateGasStats(data));\n                    } else if (message.t === 'ep') {\n                        if (data?.usd?.error?.message) {\n                            console.error(data?.usd?.error?.message);\n                            return;\n                        }\n                        dispatch(updateEthPrice(data));\n                    } else if (message.t === 'aw' && !!data?.map) {\n                        dispatch(\n                            updateAverageGas(\n                                data.map((d: any) => {\n                                    return {\n                                        time: d?.t?.toString(),\n                                        rapid: d?.r,\n                                        fast: d?.f\n                                    }\n                                })\n                            )\n                        );\n                    } else if (message.t === historicalGasCmd.block && !!data?.map) {\n                        dispatch(\n                            updateHistoricalGas(\n                                data.map((d: any) => {\n                                    return {\n                                        blocknumber: d?.b,\n                                        rapid: d?.r,\n                                        fast: d?.f\n                                    }\n                                })\n                            )\n                        );\n                    } else if ((\n                        message.t === historicalGasCmd.minute_1 ||\n                        message.t === historicalGasCmd.minute_10 ||\n                        message.t === historicalGasCmd.hour_1 ||\n                        message.t === historicalGasCmd.day_1\n                    ) && !!data?.map) {\n                        dispatch(\n                            updateHistoricalGas(\n                                data.map((d: any) => {\n                                    return {\n                                        time: d?.t.toString(),\n                                        rapid: d?.r,\n                                        fast: d?.f\n                                    }\n                                })\n                            )\n                        );\n                    } else {\n                        logSocketError(`Invalid WS Message Type: ${message.t}`);\n                    }\n                } else if (!message?.d && !message.t) {\n                    logSocketError(`Invalid WS Message Type or Data:`);\n                    console.log(lastMessage);\n                    decodeFromBlob(lastMessage.data).then(console.log);\n                }\n            })\n            .catch((err) => {\n                console.error('WS Message Parse Error:');\n                console.log(err);\n            });\n        } else if (lastMessage !== null) {\n            logSocketError(`Invalid WS Message: ${lastMessage}`);\n        }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [lastMessage]);\n\n\n    // const handleClickSendMessage = useCallback(() =>\n    //     sendMessage('Hello'), []);\n\n    return <></>;\n}","import React, { useEffect, useRef, useState, useCallback, useMemo } from 'react';\nimport { scaleTime, scaleLinear } from '@visx/scale';\nimport styled from '@emotion/styled';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport { Group } from '@vx/group';\nimport { AxisBottom, AxisLeft } from '@vx/axis';\nimport { Bar } from '@vx/shape';\nimport { HeatmapRect } from '@visx/heatmap';\nimport { localPoint } from '@vx/event';\nimport { timeFormat } from 'd3-time-format';\nimport { \n    useTooltip, \n    TooltipWithBounds, \n    defaultStyles \n} from '@vx/tooltip';\nimport {\n    color, \n    useLocale,\n    StyledSection,\n    StyledSectionTitle,\n    StyledSectionDescription,\n    StyledChartWrapper,\n    StyledDropdownControls,\n    useWindowSize,\n    WIDTH_TABLET,\n    WIDTH_MOBILE\n} from '../util';\nimport { \n    useAppSelector, \n    selectAverageGas,\n} from '../redux';\n\ntype GasAverageType = {\n    readonly colorModePref: string;\n}\ntype Bins = {\n    readonly bin: number;\n    readonly time: Date;\n    readonly count: number;\n    readonly fast: number;\n    readonly rapid: number;\n};\ntype Bin = {\n    readonly bin: number;\n    readonly bins: Bins[];\n}[];\n\n\nfunction zeroPad(num: number, numZeros: number) {\n    var n = Math.abs(num);\n    var zeros = Math.max(0, numZeros - Math.floor(n).toString().length );\n    var zeroString = Math.pow(10,zeros).toString().substr(1);\n    if( num < 0 ) {\n        zeroString = '-' + zeroString;\n    }\n\n    return zeroString + n;\n}\n\nexport function GasAverage({colorModePref}: GasAverageType) {\n    const locale = useLocale();\n    const { data } = useAppSelector(selectAverageGas);\n    const ref = useRef<HTMLHeadingElement>(null);\n    const [chartType, setChartType] = useState<'fast'|'rapid'>('fast');\n    const [binData, setBinData] = useState(dataToBin(data));\n    const [width, setWidth] = useState(0);\n    const [windowWidth,] = useWindowSize();\n    const height = 640;\n    const margin = {\n        left: 44,\n        right: 6,\n        top: 12,\n        bottom: 40\n    };\n\n    // left: 44,\n    // right: 32,\n    // top: 12,\n    // bottom: 100\n    const xMax = width - margin.left - margin.right;\n    const yMax = height - margin.top - margin.bottom;\n    const labelColor = colorModePref === 'dark' ? 'rgba(255,255,255,0.5)' : 'rgba(51, 51, 51,0.5)';\n    const lineColor = colorModePref === 'dark' ? 'rgba(255,255,255,0.1)' : 'rgba(51, 51, 51,0.05)';\n\n    useEffect(() => {\n        setWidth(ref.current ? ref.current.offsetWidth : 0);\n    }, [windowWidth]);\n\n    useEffect(() => {\n        setBinData(dataToBin(data));\n    }, [data]);\n\n    function max<Datum>(data: Datum[], value: (d: Datum) => number): number {\n        return Math.max(...data.map(value));\n    }\n    \n    // function min<Datum>(data: Datum[], value: (d: Datum) => number): number {\n    //     return Math.min(...data.map(value));\n    // }\n    \n    // accessors\n    const bins = (d: any) => d.bins;\n    const count = (d: any) => chartType === 'fast' ? d.fast : d.rapid;\n\n    const colorMax = useMemo((): number => {\n        return max(binData, (d) => {\n            return max(bins(d), count)\n        });\n    }, [chartType, count, binData]);\n\n    const bucketSizeMax = max(binData, (d) => bins(d).length);\n\n    const binWidth = xMax / binData.length;\n    const binHeight = yMax / bucketSizeMax;\n    \n    // scales\n    const bottomAxisScale = scaleTime({\n        range: [0 + binWidth / 2, xMax - binWidth / 2],\n        domain: [binData[0]?.bins[0]?.time, binData[binData.length - 1]?.bins[0]?.time],\n    });\n    const xScale = scaleLinear<number>({\n        domain: [0, binData.length],\n    });\n    const yScale = scaleLinear<number>({\n        domain: [0, bucketSizeMax],\n    });\n    const rectColorScale = useMemo(\n        () => \n            scaleLinear<string>({\n                range: colorModePref === 'dark' ? ['#20b57e', '#fb930d', '#db3c1f'] : [color.sectionBackground, '#ff4c2c'],\n                domain: colorModePref === 'dark' ? [0, Math.floor(colorMax / 2.6), colorMax] : [0, colorMax]\n            }),\n            [colorMax, colorModePref]\n    );\n    const opacityScale = useMemo(\n        () => \n            scaleLinear<number>({\n                range: colorModePref === 'dark' ? [0.7, 1] : [0.1, 1],\n                domain: [0, colorMax],\n            }),\n            [colorMax, colorModePref]\n    );\n\n    xScale.range([0, xMax]);\n    yScale.range([yMax, 0]);\n\n    const formatHour = (value: number) => {\n        if (value === 24) return '';\n        return `${zeroPad(value, 2)}:00`;\n    }\n\n    // Tooltip\n    const tooltipStyles = {\n        ...defaultStyles,\n        background: colorModePref === 'dark' ? 'rgba(51, 51, 51,0.9)' : 'rgba(255,255,255,0.95)',\n        border: `1px solid ${lineColor}`,\n        maxWidth: `${windowWidth < 640 ? 150 : 300}px`,\n        color: colorModePref === 'dark' ? color.fontDark : color.font,\n        boxShadow: 'none',\n        padding: '8px 10px',\n        lineHeight: '20px'\n    };\n    const {\n        tooltipData,\n        tooltipLeft = 0,\n        tooltipTop = 0,\n        tooltipOpen,\n        showTooltip,\n        hideTooltip,\n    } = useTooltip();\n    const handleTooltip = useCallback((event: React.TouchEvent<SVGRectElement> | React.MouseEvent<SVGRectElement>) => {\n        const { x, y } = localPoint(event) || { x: 0, y: 0 };\n        \n        const i0 = Math.floor((x - margin.left) / binWidth);\n        const i1 = Math.floor(binHeight - ((y - 13) / binHeight));\n        const targetBin = binData[i0]?.bins[i1];\n\n        showTooltip({\n            tooltipLeft: x,\n            tooltipTop: y < 130 ? y - 16 : y - 80, \n            tooltipData: {\n                count: chartType === 'fast' ? targetBin?.fast : targetBin?.rapid,\n                time: targetBin?.time,\n                future: !!targetBin\n            }\n        });\n    }, [\n        showTooltip, \n        xScale, \n        yScale, \n        margin.left, \n        binData,\n        binHeight,\n        binWidth,\n        chartType\n    ]);\n\n    function dataToBin(data: {\n        time: number,\n        fast: number,\n        rapid: number\n    }[]): Bin {\n        if (!data || !data.length) {\n            return [];\n        }\n    \n        let binResult = [];\n        let dayResult: any[] = [];\n        let binNumberDay = 0;\n        let lastDay = new Date(data[0].time).getDate();\n        let binNumberHour = 0;\n    \n        for (let i = 0, iLen = data.length; i < iLen; i++) {\n            const hour = data[i];\n            const time = new Date(hour.time);\n            if (lastDay !== time.getDate()) {\n                lastDay = time.getDate();\n                binResult.push({\n                    bin: binNumberDay,\n                    bins: dayResult.reverse()\n                });\n                binNumberDay++;\n                binNumberHour = 0;\n                dayResult = [];\n            }\n            dayResult.push({\n                bin: binNumberHour,\n                count: chartType === 'fast' ? hour.fast : hour.rapid,\n                fast: hour.fast,\n                rapid: hour.rapid,\n                time\n            });\n            if (i === iLen - 1) {\n                binResult.push({\n                    bin: binNumberDay,\n                    bins: dayResult.reverse()\n                });\n                break;\n            }\n            binNumberHour++;\n        }\n        if (binResult.length === 8) {\n            binResult.pop();\n        }\n        binResult = binResult.reverse();\n        return binResult;\n    } \n\n    return (\n        <StyledSection>\n            <StyledGasAverageHeader>\n                <StyledGasAverageTitleContainer>\n                    <StyledSectionTitle>{locale.avgGasPrice}</StyledSectionTitle>\n                    <StyledSectionDescription>\n                        <StyledPadding>{locale.avgGasPriceDescription}</StyledPadding>\n                    </StyledSectionDescription>\n                </StyledGasAverageTitleContainer>\n                <StyledDropdownControls>\n                    <Dropdown align=\"end\" className=\"dropdown-controls\">\n                            <Dropdown.Toggle \n                                size={width <= 768 ? 'sm' : undefined} \n                                variant={colorModePref === 'dark' ? 'dark' : 'secondary'}\n                            >\n                                {locale[chartType]}\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu variant={colorModePref === 'dark' ? 'dark' : 'secondary'}>\n                                <Dropdown.Item onClick={() => setChartType('fast')}>{locale.fast}</Dropdown.Item>\n                                <Dropdown.Item onClick={() => setChartType('rapid')}>{locale.rapid}</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                </StyledDropdownControls>\n            </StyledGasAverageHeader>\n\n            <StyledChartWrapper ref={ref}>\n                <StyledChart>\n                    <svg width={width} height={height}>\n                        <Group left={margin.left} className=\"shapes\">\n                            <HeatmapRect\n                                key=\"shapes\"\n                                data={binData}\n                                xScale={(d) => xScale(d) ?? 0}\n                                yScale={(d) => yScale(d) ?? 0}\n                                colorScale={rectColorScale}\n                                opacityScale={opacityScale}\n                                binWidth={binWidth}\n                                binHeight={binHeight}\n                                gap={2}\n                            >\n                                {(heatmap) =>\n                                    heatmap.map((heatmapBins) =>\n                                        heatmapBins.map((bin) => (\n                                            <rect\n                                                key={`heatmap-rect-${bin.row}-${bin.column}`}\n                                                className={`visx-heatmap-rect-${bin.x},${bin.y}`}\n                                                width={bin.width}\n                                                height={bin.height}\n                                                x={bin.x}\n                                                y={bin.y}\n                                                /* @ts-ignore */\n                                                fill={rectColorScale(chartType === 'fast' ? bin.bin.fast : bin.bin.rapid)}\n                                                fillOpacity={bin.opacity}\n                                            />\n                                        )),\n                                    )\n                                }\n                            </HeatmapRect>\n                            <HeatmapRect\n                                key=\"label\"\n                                data={binData}\n                                xScale={(d) => xScale(d) ?? 0}\n                                yScale={(d) => yScale(d) ?? 0}\n                                colorScale={rectColorScale}\n                                opacityScale={opacityScale}\n                                binWidth={binWidth}\n                                binHeight={binHeight}\n                                gap={2}\n                            >\n                                {(heatmap) =>\n                                    heatmap.map((heatmapBins) =>\n                                        heatmapBins.map((bin) => (\n                                            <text \n                                                className=\"bin-label\"\n                                                textAnchor=\"middle\"\n                                                alignmentBaseline=\"middle\"\n                                                dominantBaseline=\"middle\"\n                                                key={`heatmap-rect-${bin.row}-${bin.column}`}\n                                                x={bin.x + bin.width / 2}\n                                                y={bin.y + bin.height / 2 + 1}\n                                            >\n                                                {/* @ts-ignore */}\n                                                {chartType === 'fast' ? bin.bin.fast : bin.bin.rapid}\n                                            </text>\n                                        )),\n                                    )\n                                }\n                            </HeatmapRect>\n                            <AxisLeft\n                                top={margin.top + 5}\n                                hideAxisLine\n                                hideTicks\n                                numTicks={24}\n                                left={-12}\n                                // @ts-ignore\n                                scale={yScale}\n                                // tickValues={['00:00', '23:00']}\n                                // @ts-ignore\n                                tickFormat={(val) => formatHour(val)}\n                                tickLabelProps={() => ({\n                                    fill: labelColor,\n                                    fontSize: 11,\n                                    textAnchor: 'middle',\n                                })}\n                            />\n                            <AxisBottom\n                                hideAxisLine\n                                top={yMax + margin.top + 16}\n                                // @ts-ignore\n                                scale={bottomAxisScale}\n                                stroke={labelColor}\n                                tickStroke={labelColor}\n                                // tickValues={}\n                                numTicks={windowWidth < 600 ? 4 : 7}\n                                tickFormat={windowWidth < 850 ? timeFormat(\"%m-%d %a\") : timeFormat(\"%m-%d %A\")}\n                                tickLabelProps={() => ({\n                                    fill: labelColor,\n                                    fontSize: 11,\n                                    textAnchor: 'middle',\n                                })}\n                            />\n                            <Bar\n                                x={0}\n                                y={26}\n                                width={xMax}\n                                height={yMax}\n                                fill=\"transparent\"\n                                rx={14}\n                                // @ts-ignore\n                                onMouseMove={handleTooltip}\n                                // @ts-ignore\n                                onMouseLeave={() => hideTooltip()}\n                            />\n                        </Group>\n                    </svg>\n                    {/* @ts-ignore */}\n                    {tooltipOpen && !!tooltipData?.future && (\n                        <TooltipWithBounds\n                            key={Math.random()}\n                            top={tooltipTop || 0}\n                            left={tooltipLeft || 0}\n                            style={tooltipStyles}\n                        >\n                            <StyledInnerTooltip>\n                                <div className=\"title\">\n                                    {/* @ts-ignore */}\n                                    {timeFormat(\"%Y-%m-%d  %H:%M\")(tooltipData?.time)}\n                                    \n                                </div>\n                                <div className=\"gas\">\n                                    <span>\n                                        {/* @ts-ignore */}\n                                        <span style={{background: rectColorScale(tooltipData?.count)}} className=\"circle\"></span>\n                                        <span>Gas Price:</span> \n                                    </span>\n                                    {/* @ts-ignore */}\n                                    <span className=\"price\">{tooltipData?.count}</span>\n                                </div>\n                            </StyledInnerTooltip>\n                        </TooltipWithBounds>\n                    )}\n                    {/* @ts-ignore */}\n                    {tooltipOpen && !tooltipData?.future && (\n                        <TooltipWithBounds\n                            key={Math.random()}\n                            top={tooltipTop || 0}\n                            left={tooltipLeft || 0}\n                            style={tooltipStyles}\n                        >\n                            <StyledInnerTooltip>\n                                <div className=\"title no-data\">\n                                    {locale.btd}\n                                </div>\n                            </StyledInnerTooltip>\n                        </TooltipWithBounds>\n                    )}\n                </StyledChart>\n            </StyledChartWrapper>\n        </StyledSection>\n    );\n}\n\nconst StyledInnerTooltip = styled.div`\n    .title {\n        margin-bottom: 10px;\n\n        &.no-data {\n            margin-bottom: 0px;\n        }\n    }\n    .circle {\n        display: inline-block;\n        height: 8px;\n        width: 8px;\n        border-radius: 4px;\n        margin-right: 5px;\n    }\n    .gas {\n        display: flex;\n        flex-direction: row;\n        flex-wrap: no-wrap;\n        justify-content: space-between;\n        align-items: center;\n    }\n    .price {\n        margin-left: 5px;\n    }\n`;\n\nconst StyledChart = styled.div`\n    .bin-label {\n        mix-blend-mode: multiply;\n        fill: ${color.font};\n        font-size: 14px;\n        font-weight: 400;\n        pointer-events: none;\n\n        @media only screen and (max-width: ${WIDTH_MOBILE}) {\n            font-size: 12px;\n        }\n        @media only screen and (max-width: 460px) {\n            font-size: 11px;\n        }\n    }\n\n    .mode-dark & {\n        .shapes {\n            background: rgba(255,255,255,0.5);\n        }\n    }\n`;\n\nconst StyledGasAverageHeader = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: no-wrap;\n    justify-content: space-between;\n    align-items: flex-start;\n`;\nconst StyledGasAverageTitleContainer = styled.div`\n    flex: 1 1 auto;\n`;\n\nconst StyledPadding = styled.div`\n    padding: 0px 16px;\n    @media only screen and (max-width: ${WIDTH_TABLET}) {\n        padding: 0 16px 0 0;\n        max-width: 344px;\n    }\n    @media only screen and (max-width: 420px) {\n        display: none;\n    }\n`;","import React, { useEffect, useState, useMemo, useRef, useCallback } from 'react';\nimport styled from '@emotion/styled';\nimport { useTooltip, TooltipWithBounds, defaultStyles } from '@vx/tooltip';\nimport { localPoint } from '@vx/event';\nimport { AxisBottom, AxisLeft } from '@vx/axis';\nimport { AreaClosed, Line, Bar } from '@vx/shape';\nimport { curveMonotoneX } from '@vx/curve';\nimport { LinearGradient } from '@vx/gradient';\nimport { Group } from '@vx/group';\nimport { scaleLinear } from '@vx/scale';\nimport { extent, bisector } from 'd3-array';\nimport { useWindowSize } from '../util';\n\nimport { \n    color, \n    useLocale,\n    StyledSectionTitle,\n    StyledSectionDescription,\n    StyledChartWrapper\n} from '../util';\nimport { \n    useAppSelector, \n    selectGasCounts,\n    selectGasStats\n} from '../redux';\n\ntype GasCountsType = {\n    readonly colorModePref: string;\n    readonly className?: string;\n}\ntype GasCountItemState = {\n    readonly gasPrice: number;\n    readonly count: number;\n}\n\nexport function GasCounts({className, colorModePref}: GasCountsType) {\n    const locale = useLocale();\n    const {\n        tooltipData,\n        tooltipLeft,\n        tooltipTop,\n        tooltipOpen,\n        showTooltip,\n        hideTooltip,\n    } = useTooltip();\n    const tooltipLineColor = colorModePref === 'dark' ? color.backgroundDark : color.background;\n    const labelColor = colorModePref === 'dark' ? 'rgba(255,255,255,0.5)' : 'rgba(51, 51, 51,0.5)';\n    const lineColor = colorModePref === 'dark' ? 'rgba(255,255,255,0.1)' : 'rgba(51, 51, 51,0.05)';\n    const [width, setWidth] = useState(0);\n    const { gasFast } = useAppSelector(selectGasStats);\n    const state = useAppSelector(selectGasCounts);\n    const [enableHighTxFilter, /*setEnableHighTxFilter*/] = useState(true);\n    const [cumulativeState, setCumulativeState] = useState<GasCountItemState[]>(state);\n    const [/*rawState*/, setRawState] = useState<GasCountItemState[]>(state);\n    const [chartType, /*setChartType*/] = useState<'cumulative' |'instantaneous'>('cumulative');\n\n    const ref = useRef<HTMLHeadingElement>(null);\n    const [windowWidth,] = useWindowSize();\n    \n    useEffect(() => {\n        if (!state || state.length === 0) return;\n        setRawState(state);\n\n        let cumulativeCount = 0;\n        // count up state\n        const cumulativeStateUnfiltered = [...state].reverse().map(({gasPrice, count}) => {\n            cumulativeCount += count;\n            return {\n                gasPrice,\n                count: cumulativeCount\n            }\n        });\n        \n        // get the average gas price\n        const averageGasPrice = Math.ceil([...state].reduce((a, b) => ({\n            gasPrice: a.gasPrice + b.gasPrice,\n            count: 0\n        })).gasPrice / state.length);\n        \n        // filter it out by a factor of 2.5\n        const cumulativeStateFiltered = cumulativeStateUnfiltered.filter((s) => {\n            return s.gasPrice < averageGasPrice * 2\n        });\n        \n        // set either filtered or unfiltered depending on settings\n        setCumulativeState(\n            enableHighTxFilter ? cumulativeStateFiltered : cumulativeStateUnfiltered\n        );\n    }, [state, enableHighTxFilter]);\n\n    useEffect(() => {\n        setWidth(ref.current ? ref.current.offsetWidth : 0);\n    }, [windowWidth]);\n\n    const tooltipStylesFast = {\n        ...defaultStyles,\n        background: 'transparent',\n        border: `1px solid ${lineColor}`,\n        color: colorModePref === 'dark' ? color.orangeDark : color.orange,\n        boxShadow: 'none'\n    };\n\n    const tooltipStyles = {\n        ...defaultStyles,\n        background: colorModePref === 'dark' ? 'rgba(255,255,255,0.1)' : 'rgba(51, 51, 51,0.05)',\n        border: `1px solid ${lineColor}`,\n        maxWidth: `${windowWidth < 640 ? 150 : 300}px`,\n        color: colorModePref === 'dark' ? color.fontDark : color.font,\n        boxShadow: 'none'\n    };\n\n    const height = 230;\n    const margin = {\n        left: 32,\n        right: 15,\n        top: 10,\n        bottom: 20\n    }\n\n    // bounds\n    const xMax = width - margin.left - margin.right;\n    const yMax = height - margin.top - margin.bottom;\n\n    const getGasPrice = (s: GasCountItemState) => s?.gasPrice ?? 0;\n    const getTxCount = (s: GasCountItemState) => s?.count ?? 0;\n    const bisectGasPrice = bisector((s: GasCountItemState) => s.gasPrice).left;\n\n    const gasPriceScale = useMemo(\n        () =>\n            scaleLinear({\n                range: [0, xMax],\n                domain: extent(chartType === 'cumulative' ? cumulativeState : state, getGasPrice) as [number, number]\n            }),\n            [xMax, cumulativeState, chartType, state]\n    );\n\n    const txCountScale = useMemo(\n        () =>\n            scaleLinear({\n                range: [yMax, 0],\n                domain: extent(chartType === 'cumulative' ? cumulativeState : state, getTxCount) as [number, number],\n                nice: true,\n            }),\n            [yMax, cumulativeState, chartType, state]\n    );\n\n    // const { containerRef, TooltipInPortal } = useTooltipInPortal({\n    //     detectBounds: true,\n    //     // when tooltip containers are scrolled, this will correctly update the Tooltip position\n    //     scroll: true,\n    //     debounce: 300,\n    //   })\n\n    const handleTooltip = useCallback((event: React.TouchEvent<SVGRectElement> | React.MouseEvent<SVGRectElement>) => {\n        const { x } = localPoint(event) || { x: 0 };\n        const x0 = gasPriceScale.invert(x - margin.left);\n        const workingState = [...cumulativeState].reverse(); // TODO make this dynamic based on state type\n        const index = bisectGasPrice(workingState, x0, 1); \n        const d0 = workingState[index - 1];\n        const d1 = workingState[index];\n\n        let d = d0;\n        if (d1 && getGasPrice(d1)) {\n          d = x0.valueOf() - getGasPrice(d0).valueOf() > getGasPrice(d1).valueOf() - x0.valueOf() ? d1 : d0;\n        }\n\n        showTooltip({\n            tooltipLeft: x - margin.left,\n            tooltipTop: txCountScale(getTxCount(d)),\n            tooltipData: `${d.count} ${locale.txGasPriceAbove} ${d.gasPrice} ${locale.gwei}`\n        });\n    }, [\n        showTooltip, \n        gasPriceScale, \n        txCountScale, \n        margin.left, \n        cumulativeState, \n        bisectGasPrice,\n        locale.gwei,\n        locale.txGasPriceAbove\n    ]);\n\n    return (\n        <div className={className} ref={ref}>\n            <StyledOverflow>\n                <StyledSectionTitle>{locale.pendingTxTitle}</StyledSectionTitle>\n                <StyledSectionDescription>\n                    {locale.pendingTxDescription}\n                </StyledSectionDescription>\n            </StyledOverflow>\n            <StyledChartWrapper>\n                <StyledSvg width={width} height={height}>\n                    <Group left={margin.left} top={margin.top}>\n                        <LinearGradient \n                            id=\"area-gradient\" \n                            from={color.blue} \n                            to={color.greenDark} \n                            fromOpacity={0.1}\n                            toOpacity={colorModePref === 'dark' ? 0.8 : 0.9}\n                            rotate={-90} \n                        />    \n                        <AreaClosed\n                            data={chartType === 'cumulative' ? cumulativeState : state}\n                            // @ts-ignore\n                            x={d => gasPriceScale(getGasPrice(d)) ?? 0}\n                            // @ts-ignore\n                            y={d => txCountScale(getTxCount(d)) ?? 0}\n                            yScale={txCountScale}\n                            strokeWidth={1}\n                            stroke=\"url(#area-gradient)\"\n                            fill=\"url(#area-gradient)\"\n                            curve={curveMonotoneX}\n                        />\n                        <Bar\n                            x={0}\n                            y={0}\n                            width={xMax}\n                            height={yMax}\n                            fill=\"transparent\"\n                            rx={14}\n                            // @ts-ignore\n                            onTouchStart={handleTooltip}\n                            // @ts-ignore\n                            onTouchMove={handleTooltip}\n                            // @ts-ignore\n                            onMouseMove={handleTooltip}\n                            // @ts-ignore\n                            onMouseLeave={() => hideTooltip()}\n                        />\n                        <AxisLeft\n                            hideAxisLine\n                            hideTicks\n                            numTicks={2}\n                            left={-8}\n                            scale={txCountScale}\n                            // tickFormat={formatDate}\n                            tickLabelProps={() => ({\n                                fill: labelColor,\n                                fontSize: 11,\n                                textAnchor: 'middle',\n                            })}\n                        />\n                        <AxisBottom\n                            top={yMax}\n                            scale={gasPriceScale}\n                            stroke={labelColor}\n                            tickStroke={labelColor}\n                            numTicks={width <= 480 ? 6 : undefined}\n                            tickLabelProps={() => ({\n                                fill: labelColor,\n                                fontSize: 11,\n                                textAnchor: 'middle',\n                            })}\n                        />\n                        {!!gasPriceScale(gasFast) && (\n                            <Line\n                                from={{ x: gasPriceScale(gasFast), y: 0 }}\n                                to={{ x: gasPriceScale(gasFast), y: yMax }}\n                                stroke={colorModePref === 'dark' ? color.orangeDark : color.orange}\n                                strokeWidth={1}\n                                pointerEvents=\"none\"\n                            />\n                        )}\n                        <Line\n                            from={{ x: 0, y: 0 }}\n                            to={{ x: xMax, y: 0 }}\n                            stroke={lineColor}\n                            strokeWidth={2}\n                            pointerEvents=\"none\"\n                            strokeDasharray=\"5,4\"\n                        />\n                        {tooltipOpen && (\n                            <g>\n                                <Line\n                                    from={{ x: tooltipLeft, y: 0 }}\n                                    to={{ x: tooltipLeft, y: yMax }}\n                                    stroke={tooltipLineColor}\n                                    strokeWidth={2}\n                                    pointerEvents=\"none\"\n                                    strokeDasharray=\"5,4\"\n                                />\n                            </g>\n                        )}\n                    </Group>\n                </StyledSvg>\n                {!!gasPriceScale(gasFast) && (\n                    <TooltipWithBounds\n                        top={windowWidth > 640 ? 30 : 30}\n                        left={(gasPriceScale(gasFast) || 0) + 30}\n                        key={Math.random()}\n                        style={tooltipStylesFast}\n                        // stroke={colorModePref === 'dark' ? color.orangeDark : color.orange}\n                    >\n                        {locale.fast}\n                    </TooltipWithBounds>\n                )}\n                {tooltipOpen && (\n                    <TooltipWithBounds\n                        // set this to random so it correctly updates with parent bounds\n                        key={Math.random()}\n                        top={(tooltipTop || 0) - 30}\n                        left={(tooltipLeft || 0) + 30}\n                        style={tooltipStyles}\n                    >\n                        {tooltipData}\n                    </TooltipWithBounds>\n                )}\n            </StyledChartWrapper>\n        </div>\n    );\n}\n\nconst StyledOverflow = styled.div`\n    overflow: auto;\n`;\n\nconst StyledSvg = styled.svg`\n    height: 230px;\n    margin: 18px auto -8px;\n`;\n\n","import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport { useTooltip, TooltipWithBounds, defaultStyles } from '@vx/tooltip';\nimport { localPoint } from '@vx/event';\nimport { LinePath } from '@visx/shape';\nimport { Line, Bar } from '@vx/shape';\nimport { curveMonotoneX } from '@visx/curve';\nimport { scaleTime, scaleLinear } from '@visx/scale';\nimport { extent, bisector } from 'd3-array';\nimport { timeFormat } from 'd3-time-format';\nimport { AxisBottom, AxisLeft } from '@vx/axis';\nimport { MarkerCircle } from '@visx/marker';\nimport { Group } from '@vx/group';\nimport styled from '@emotion/styled';\nimport { TildeIcon } from '../asset';\nimport {\n    color, \n    useLocale,\n    StyledSection,\n    StyledSectionTitle,\n    StyledSectionDescription,\n    StyledChartWrapper,\n    StyledDropdownControls,\n    useWindowSize,\n    WIDTH_TABLET\n} from '../util';\nimport { \n    useAppDispatch,\n    useAppSelector, \n    selectHistoricalGas,\n    updateHistoricalGasType,\n} from '../redux';\n\ntype GasHistoricalType = {\n    readonly colorModePref: string;\n}\n\ntype GasHistoricalDataType = {\n    readonly rapid: number;\n    readonly fast: number;\n    readonly txKnown: number;\n    readonly txEst: number;\n    readonly blocknumber: string;\n    readonly time: number | Date;\n}\n\nexport function GasHistorical({colorModePref}: GasHistoricalType) {\n    const {\n        payloadType: chartType,\n        data\n    } = useAppSelector(selectHistoricalGas);\n    const dispatch = useAppDispatch();\n    const locale = useLocale();\n    const tooltipLineColor = colorModePref === 'dark' ? color.backgroundDark : color.background;\n    const circleColor = colorModePref === 'dark' ? 'rgba(255,255,255,0.8)' : 'rgba(51, 51, 51,0.8)';\n    const labelColor = colorModePref === 'dark' ? 'rgba(255,255,255,0.5)' : 'rgba(51, 51, 51,0.5)';\n    const lineColor = colorModePref === 'dark' ? 'rgba(255,255,255,0.1)' : 'rgba(51, 51, 51,0.05)';\n    const lineRapidColor = color.green;\n    const lineFastColor = colorModePref === 'dark' ? color.orangeDark : color.orange;\n    const [width, setWidth] = useState(0);\n    const ref = useRef<HTMLHeadingElement>(null);\n    const [windowWidth,] = useWindowSize();\n    const height = width <= 480 ? 240 : 260;\n    const margin = {\n        left: 32,\n        right: 10,\n        top: 32,\n        bottom: 20\n    }\n    const xMax = width - margin.left - margin.right;\n    const yMax = height - margin.top - margin.bottom;\n\n    useEffect(() => {\n        setWidth(ref.current ? ref.current.offsetWidth : 0);\n    }, [windowWidth]);\n\n    const extentMixedWithPadding = (data: any, getOne: any, getTwo: any) => {\n        const paddingPerc = width <= 480 ? 0.55 : 0.2;\n        // @ts-expect-error\n        const extentOne = extent(data, getOne) as [number, number];\n        // @ts-expect-error\n        const extentTwo = extent(data, getTwo) as [number, number];\n        // find greatest min/max\n        const extentCalc = [\n            extentOne[0] <= extentTwo[0] ? extentOne[0] : extentTwo[0],\n            extentOne[1] > extentTwo[1] ? extentOne[1] : extentTwo[1]\n        ];\n        // adding padding\n        return [\n            extentCalc[0] - ((extentCalc[1] - extentCalc[0]) * paddingPerc),\n            extentCalc[1] + ((extentCalc[1] - extentCalc[0]) * paddingPerc)\n        ];\n    }\n\n    // data accessors\n    // const formatDate = timeFormat(\"%b %d, '%y\");\n    const formatDate = useCallback(() => {\n        switch (chartType) {\n            case 'hour_1':\n                return timeFormat(\"%a %H:%M\"); \n            case 'day_1':\n                return timeFormat(\"%b %d, '%y\");\n            case 'minute_1':\n            case 'minute_10':\n            default:\n                return timeFormat(\"%H:%M\"); \n        };\n    }, [chartType]);\n    const getX = useCallback((d: GasHistoricalDataType): number | Date => {\n        return chartType === 'block' ? parseInt(d?.blocknumber) : new Date(d?.time);\n    }, [chartType]);\n    const getYRapid = (d: GasHistoricalDataType): number => d?.rapid;\n    const getYFast = (d: GasHistoricalDataType): number => d?.fast;\n    const bisectX = bisector((s: GasHistoricalDataType) => chartType === 'block' ? parseInt(s?.blocknumber) : new Date(s?.time)).left;\n\n    // scales\n    const xScale = chartType === 'block' ? scaleLinear<number>({\n        range: [0, xMax - 20],\n        // @ts-expect-error\n        domain: extent(data, getX) as [number, number],\n    }) : scaleTime<number>({ \n        range: [0, xMax - 20],\n        // @ts-expect-error\n        domain: extent(data, getX) as [number, number],\n    });\n    \n    const yScale = scaleLinear<number>({\n        range: [yMax, 0],\n        domain: extentMixedWithPadding(data, getYRapid, getYFast) as [number, number],\n    });\n    \n    // tooltip\n    const tooltipStyles = {\n        ...defaultStyles,\n        background: colorModePref === 'dark' ? 'rgba(255,255,255,0.1)' : 'rgba(51, 51, 51,0.05)',\n        border: `1px solid ${lineColor}`,\n        maxWidth: `${windowWidth < 640 ? 150 : 300}px`,\n        color: colorModePref === 'dark' ? color.fontDark : color.font,\n        boxShadow: 'none',\n        padding: '8px 10px',\n        lineHeight: '20px'\n    };\n    const {\n        tooltipData,\n        tooltipLeft = 0,\n        tooltipTop = 0,\n        tooltipOpen,\n        showTooltip,\n        hideTooltip,\n    } = useTooltip();\n    const handleTooltip = useCallback((event: React.TouchEvent<SVGRectElement> | React.MouseEvent<SVGRectElement>) => {\n        const { x } = localPoint(event) || { x: 0 };\n        \n        const x0 = xScale.invert(x - margin.left);\n        const workingState = [...data].reverse(); \n        // @ts-expect-error\n        const index = bisectX(workingState, x0, 1); \n        const d0 = workingState[index - 1];\n        const d1 = workingState[index];\n\n        let d = d0;\n        // @ts-expect-error\n        if (d1 && getX(d1)) {\n            // @ts-expect-error\n          d = x0.valueOf() - getX(d0).valueOf() > getX(d1).valueOf() - x0.valueOf() ? d1 : d0;\n        }\n\n        showTooltip({\n            tooltipLeft: x - margin.left,\n            // @ts-expect-error\n            tooltipTop: yScale(getYRapid(d)),\n            tooltipData: {\n                // @ts-expect-error\n                circleLeft: xScale(getX(d)),\n                // @ts-expect-error\n                circleFastTop: yScale(getYFast(d)),\n                // @ts-expect-error\n                blockOrDate: chartType === 'block' ? d?.blocknumber : formatDate()(new Date(d?.time)),\n                rapid: d?.rapid,\n                fast: d?.fast\n            }\n        });\n    }, [\n        showTooltip, \n        xScale, \n        yScale, \n        margin.left, \n        data, \n        bisectX,\n        chartType,\n        getX,\n        formatDate\n    ]);\n\n    const optionsMap = {\n        block: locale.histSelectBlock,\n        minute_1: locale.histSelectMinuteOne,\n        minute_10: locale.histSelectMinuteTen,\n        hour_1: locale.histSelectHourOne,\n        day_1: locale.histSelectDayOne,\n    };\n\n    return (\n        <StyledSection>\n            <StyledGasHistoricalHeader>\n                <StyledGasHistoricalTitleContainer>\n                    <StyledSectionTitle>{locale.histGasPrice}</StyledSectionTitle>\n                    <StyledSectionDescription>\n                        <StyledPadding>{locale.histGasPriceDescription}</StyledPadding>\n                    </StyledSectionDescription>\n                </StyledGasHistoricalTitleContainer>\n                <StyledDropdownControls>\n                    <Dropdown align=\"end\" className=\"dropdown-controls\">\n                        <Dropdown.Toggle \n                            size={width <= 768 ? 'sm' : undefined} \n                            variant={colorModePref === 'dark' ? 'dark' : 'secondary'}\n                        >\n                            {optionsMap[chartType]}\n                        </Dropdown.Toggle>\n                        <Dropdown.Menu variant={colorModePref === 'dark' ? 'dark' : 'secondary'}>\n                            <Dropdown.Item onClick={() => dispatch(updateHistoricalGasType('block'))}>{optionsMap.block}</Dropdown.Item>\n                            <Dropdown.Item onClick={() => dispatch(updateHistoricalGasType('minute_1'))}>{optionsMap.minute_1}</Dropdown.Item>\n                            <Dropdown.Item onClick={() => dispatch(updateHistoricalGasType('minute_10'))}>{optionsMap.minute_10}</Dropdown.Item>\n                            <Dropdown.Item onClick={() => dispatch(updateHistoricalGasType('hour_1'))}>{optionsMap.hour_1}</Dropdown.Item>\n                            <Dropdown.Item onClick={() => dispatch(updateHistoricalGasType('day_1'))}>{optionsMap.day_1}</Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </StyledDropdownControls>\n            </StyledGasHistoricalHeader>\n            \n            <StyledChartWrapper ref={ref}>\n                <svg width={width} height={height}>\n                    <MarkerCircle id=\"marker-circle\" fill=\"#fff\" size={2} refX={2} />\n                    <Group left={margin.left} top={margin.top}>\n                        <Line\n                            from={{ x: 0, y: 0 }}\n                            to={{ x: xMax, y: 0 }}\n                            stroke={lineColor}\n                            strokeWidth={2}\n                            pointerEvents=\"none\"\n                            strokeDasharray=\"5,4\"\n                        />\n                        <LinePath<GasHistoricalDataType>\n                            curve={curveMonotoneX}\n                            // @ts-expect-error\n                            data={data}\n                            x={(d) => xScale(getX(d)) ?? 0}\n                            y={(d) => yScale(getYFast(d)) ?? 0}\n                            stroke={lineFastColor}\n                            strokeWidth={2}\n                            strokeOpacity={1}\n                            shapeRendering=\"geometricPrecision\"\n                            // markerMid=\"url(#marker-circle)\"\n                            // markerStart=\"url(#marker-circle)\"\n                            // markerEnd=\"url(#marker-circle)\"\n                        />\n                        <LinePath<GasHistoricalDataType>\n                            curve={curveMonotoneX}\n                            // @ts-expect-error\n                            data={data}\n                            x={(d) => xScale(getX(d)) ?? 0}\n                            y={(d) => yScale(getYRapid(d)) ?? 0}\n                            stroke={lineRapidColor}\n                            strokeWidth={2}\n                            strokeOpacity={1}\n                            shapeRendering=\"geometricPrecision\"\n                            // markerMid=\"url(#marker-circle)\"\n                            // markerStart=\"url(#marker-circle)\"\n                            // markerEnd=\"url(#marker-circle)\"\n                        />\n                        <Bar\n                            x={0}\n                            y={0}\n                            width={xMax}\n                            height={yMax}\n                            fill=\"transparent\"\n                            rx={14}\n                            // @ts-ignore\n                            onTouchStart={handleTooltip}\n                            // @ts-ignore\n                            onTouchMove={handleTooltip}\n                            // @ts-ignore\n                            onMouseMove={handleTooltip}\n                            // @ts-ignore\n                            onMouseLeave={() => hideTooltip()}\n                        />\n                        <AxisLeft\n                            hideAxisLine\n                            hideTicks\n                            numTicks={3}\n                            left={-8}\n                            // @ts-ignore\n                            scale={yScale}\n                            // tickFormat={formatDate}\n                            tickLabelProps={() => ({\n                                fill: labelColor,\n                                fontSize: 11,\n                                textAnchor: 'middle',\n                            })}\n                        />\n                        <AxisBottom\n                            top={yMax}\n                            // @ts-ignore\n                            scale={xScale}\n                            stroke={labelColor}\n                            tickStroke={labelColor}\n                            // tickValues={}\n                            numTicks={width <= 820 ? (width <= 480 ? 3 : 5) : undefined}\n                            tickFormat={chartType === 'block' ? (d) => d : formatDate()}\n                            tickLabelProps={() => ({\n                                fill: labelColor,\n                                fontSize: 11,\n                                textAnchor: 'middle',\n                            })}\n                        />\n                        {tooltipOpen && (\n                            <g>\n                                <Line\n                                    from={{ x: tooltipLeft, y: 0 }}\n                                    to={{ x: tooltipLeft, y: yMax }}\n                                    stroke={tooltipLineColor}\n                                    strokeWidth={2}\n                                    pointerEvents=\"none\"\n                                    strokeDasharray=\"5,4\"\n                                />\n                                <circle\n                                    // @ts-expect-error\n                                    cx={tooltipData?.circleLeft ?? 0}\n                                    cy={tooltipTop}\n                                    r={4}\n                                    fill={lineRapidColor}\n                                    fillOpacity={0.5}\n                                    stroke={circleColor}\n                                    strokeOpacity={1}\n                                    strokeWidth={2}\n                                    pointerEvents=\"none\"\n                                />\n                                <circle\n                                    // @ts-expect-error\n                                    cx={tooltipData?.circleLeft ?? 0}\n                                    // @ts-expect-error\n                                    cy={tooltipData?.circleFastTop ?? 0}\n                                    r={4}\n                                    fill={lineFastColor}\n                                    fillOpacity={0.5}\n                                    stroke={circleColor}\n                                    strokeOpacity={1}\n                                    strokeWidth={2}\n                                    pointerEvents=\"none\"\n                                />\n                            </g>\n                        )}\n                    </Group>\n                </svg>\n                {tooltipOpen && (\n                    <TooltipWithBounds\n                        key={Math.random()}\n                        top={35}\n                        left={(tooltipLeft || 0) + 30}\n                        style={tooltipStyles}\n                    >\n                        <StyledInnerTooltip>\n                            <div className=\"title\">\n                                {/* @ts-ignore */}\n                                {tooltipData?.blockOrDate}\n                            </div>\n                            <div className=\"gas\">\n                                <div className=\"vert\">\n                                    <span className=\"circ rapid\"></span>\n                                    {locale.rapid}:\n                                </div> \n                                {/* @ts-ignore */}\n                                <div className=\"val\">{tooltipData?.rapid}</div>\n                            </div>\n                            <div className=\"gas\">\n                                <div className=\"vert\">\n                                    <span className=\"circ fast\"></span>\n                                    {locale.fast}:\n                                </div> \n                                {/* @ts-ignore */}\n                                <div className=\"val\">{tooltipData?.fast}</div>\n                            </div>\n                        </StyledInnerTooltip>\n                    </TooltipWithBounds>\n                )}\n            </StyledChartWrapper>\n            <StyledLegend>\n                <StyledLegendItem className=\"rapid\">\n                    <TildeIcon />\n                    <span>{locale.rapid}</span>\n                </StyledLegendItem>\n                <StyledLegendItem className=\"fast\">\n                    <TildeIcon />\n                    <span>{locale.fast}</span>\n                </StyledLegendItem>\n            </StyledLegend>\n        </StyledSection>\n        \n    );\n}\n\nconst StyledPadding = styled.div`\n    padding: 0px 16px;\n    @media only screen and (max-width: ${WIDTH_TABLET}) {\n        padding: 0 16px 0 0;\n        max-width: 344px;\n    }\n    @media only screen and (max-width: 420px) {\n        display: none;\n    }\n`;\n\nconst StyledLegend = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: no-wrap;\n    justify-content: center;\n    align-items: flex-start;\n    margin-bottom: -10px;\n`;\n\nconst StyledLegendItem = styled.div`\n    margin: 20px 5px 0;\n    span {\n        opacity: 0.5;\n        font-size: 12px;\n        margin: 0 5px;\n    }\n    svg {\n        max-width: 15px;\n        max-height: 15px;\n    }\n    &.fast svg {\n        fill: ${color.orange};\n    }\n    &.rapid svg {\n        fill: ${color.green};\n    }\n\n    .mode-dark & {\n        &.fast svg {\n            fill: ${color.orangeDark};\n        }\n    }\n`;\n\nconst StyledGasHistoricalHeader = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: no-wrap;\n    justify-content: space-between;\n    align-items: flex-start;\n`;\n\nconst StyledGasHistoricalTitleContainer = styled.div`\n    flex: 1 1 auto;\n`;\n\nconst StyledInnerTooltip = styled.div`\n    .title {\n        margin-bottom: 10px;\n    }\n    .gas {\n        display: flex;\n        flex-direction: row;\n        flex-wrap: no-wrap;\n        justify-content: space-between;\n        align-items: center;\n\n        .vert {\n            display: flex;\n            flex-direction: row;\n            flex-wrap: no-wrap;\n            justify-content: space-between;\n            align-items: center;\n        }\n\n        .circ {\n            display: block;\n            height: 8px;\n            width: 8px;\n            border-radius: 4px;\n            background: white;\n            margin-right: 5px;\n\n            &.rapid {\n                background: ${color.green};\n            }\n            &.fast {\n                background: ${color.orange};\n            }\n        }\n\n        .val {\n            margin-left: 10px;\n        }\n    }\n\n    .mode-dark & {\n        .gas .circ.fast {\n            background: ${color.orangeDark};\n        }\n    }\n`;","import React, { useEffect, useState } from 'react';\nimport styled from '@emotion/styled';\nimport { \n    color, \n    useLocale,\n    convertHexToRGBA,\n    StyledSectionTitle,\n    StyledSectionDescription,\n    WIDTH_TABLET,\n    WIDTH_MOBILE,\n    StyledLoadingBars\n} from '../util';\nimport { \n    LogoGasSlow,\n    LogoGasStandard,\n    LogoGasFast,\n    LogoGasRapid\n  } from '../asset';\nimport { \n    useAppSelector, \n    selectGasStats,\n    selectEthPriceUsd\n} from '../redux';\n\nexport function GasStats() {\n    const locale = useLocale();\n    const transferCostGas = 21000;\n    function calculateTransferCost(gasPriceGwei: number, ethPrice: number) { \n        return (((transferCostGas * gasPriceGwei) / 1000000000) * ethPrice).toFixed(2);\n    }\n\n    const {\n        gasRapid,\n        gasFast,\n        gasStandard,\n        gasSlow\n    } = useAppSelector(selectGasStats);\n    const ethPrice = useAppSelector(selectEthPriceUsd);\n    const [txCostRapid, setTxCostRapid] = useState(calculateTransferCost(gasRapid, ethPrice));\n    const [txCostFast, setTxCostFast] = useState(calculateTransferCost(gasFast, ethPrice));\n    const [txCostStandard, setTxCostStandard] = useState(calculateTransferCost(gasStandard, ethPrice));\n    const [txCostSlow, setTxCostSlow] = useState(calculateTransferCost(gasSlow, ethPrice));\n\n    useEffect(() => {\n        setTxCostRapid(calculateTransferCost(gasRapid, ethPrice));\n        setTxCostFast(calculateTransferCost(gasFast, ethPrice));\n        setTxCostStandard(calculateTransferCost(gasStandard, ethPrice));\n        setTxCostSlow(calculateTransferCost(gasSlow, ethPrice));\n\n        if (gasRapid !== 0 && gasSlow !== 0) {\n            document.title = `${gasRapid}-${gasSlow} ${locale.title}`;\n        }\n    }, [\n        gasRapid,\n        gasFast,\n        gasStandard,\n        gasSlow, \n        ethPrice,\n        locale.title\n    ]);\n\n    return (\n        <>\n            <StyledSectionTitle className=\"pad-top tablet-except\">{locale.gasStatTitle}</StyledSectionTitle> \n            <StyledSectionDescription className=\"tablet-except\">{locale.gasStatDescription}</StyledSectionDescription>\n\n            <GasPriceWrapper>\n                <GasPriceList>\n                    <GasPrice className=\"rapid\">\n                        <div className=\"label\">\n                            <span><LogoGasRapid /></span>\n                            <span>{locale.rapid}</span>\n                        </div>\n                        <div className=\"price\">\n                            <StyledLoadingBarsWrap className={!gasFast ? 'loading' : ''} />\n                            <strong className={!gasFast ? 'loading' : ''}>{gasRapid}</strong>\n                        </div>\n                        <div className=\"timecost\">\n                            {locale.currency}{txCostRapid} <span className=\"hideMobile\">| </span><span className=\"displayMobile\">15 {locale.seconds}</span>\n                        </div>\n                    </GasPrice>\n                    <GasPrice className=\"fast\">\n                        <div className=\"label\">\n                            <span><LogoGasFast /></span>\n                            <span>{locale.fast}</span>\n                        </div>\n                        <div className=\"price\">\n                            <StyledLoadingBarsWrap className={!gasFast ? 'loading' : ''} />\n                            <strong className={!gasFast ? 'loading' : ''}>{gasFast}</strong>\n                        </div>\n                        <div className=\"timecost\">\n                            {locale.currency}{txCostFast} <span className=\"hideMobile\">| </span><span className=\"displayMobile\">1 {locale.minute}</span>\n                        </div>\n                    </GasPrice>\n                    <GasPrice className=\"standard\">\n                        <div className=\"label\">\n                            <span><LogoGasStandard /></span>\n                            <span>{locale.standard}</span>\n                        </div>\n                        <div className=\"price\">\n                            <StyledLoadingBarsWrap className={!gasFast ? 'loading' : ''} />\n                            <strong className={!gasFast ? 'loading' : ''}>{gasStandard}</strong>\n                        </div>\n                        <div className=\"timecost\">\n                            {locale.currency}{txCostStandard} <span className=\"hideMobile\">| </span><span className=\"displayMobile\">3 {locale.minutes}</span>\n                        </div>\n                    </GasPrice>\n                    <GasPrice className=\"slow\">\n                        <div className=\"label\">\n                            <span><LogoGasSlow /></span>\n                            <span>{locale.slow}</span>\n                        </div>\n                        <div className=\"price\">\n                            <StyledLoadingBarsWrap className={!gasFast ? 'loading' : ''} />\n                            <strong className={!gasFast ? 'loading' : ''}>{gasSlow}</strong>\n                        </div>\n                        <div className=\"timecost\">\n                            {locale.currency}{txCostSlow} <span className=\"hideMobile\">| </span><span className=\"displayMobile\">&#62;10 {locale.minutes}</span>\n                        </div>\n                    </GasPrice>\n                </GasPriceList>\n            </GasPriceWrapper>\n        </>\n    );\n}\n\nconst StyledLoadingBarsWrap = styled(StyledLoadingBars)`\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    margin-top: -2px;\n    transform: translateX(-50%) translateY(-50%);\n\n    .rapid & rect {\n        fill: ${color.green};\n        .mode-dark & {\n            fill: ${color.greenDark};\n        }\n    }\n\n    .fast & rect {\n        fill: ${color.orange};\n        .mode-dark & {\n            fill: ${color.orangeDark};\n        }\n    }\n\n    .standard & rect {\n        fill: ${color.blue};\n        .mode-dark & {\n            fill: ${color.blueDark};\n        }\n    }\n\n    .slow & rect {\n        fill: ${color.purple};\n        .mode-dark & {\n            fill: ${color.purpleDark};\n        }\n    }\n\n    @media only screen and (max-width: ${WIDTH_TABLET}) {\n        transform: translateY(-50%);\n        left: auto;\n        right: 0px;\n    }\n`;\n\nconst GasPriceWrapper = styled.div`\n    margin: 0 auto;\n    max-width: 986px;\n    padding-bottom: 24px;\n\n    @media only screen and (max-width: ${WIDTH_MOBILE}) {\n        padding-bottom: 20px;\n    }\n`;\n\nconst GasPriceList = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: no-wrap;\n    justify-content: space-between;\n    align-items: center;\n    margin: 26px 0px 0px;\n\n    @media only screen and (max-width: ${WIDTH_TABLET}) {\n        flex-direction: column;\n    }\n`;\n\nconst GasPrice = styled.div`\n    height: 176px;\n    width: 22.5%;\n    background: ${color.sectionBackground};\n    border-radius: 22px;\n    text-align: center;\n    display: flex;\n    flex-direction: column;\n    flex-wrap: nowrap;\n    justify-content: space-between;\n    align-items: center;\n\n    @media only screen and (max-width: ${WIDTH_TABLET}) {\n        height: 80px;\n        width: 80%;\n        margin-bottom: 12px;\n        flex-direction: row;\n\n        &:last-child {\n            margin-bottom: 2px;\n        }\n    }\n\n    @media only screen and (max-width: ${WIDTH_MOBILE}) {\n        width: 100%;\n    }\n\n    \n\n    .label {\n        font-size: 24px;\n        display: flex;\n        flex-direction: row;\n        flex-wrap: no-wrap;\n        justify-content: flex-start;\n        align-items: center;\n        margin: 26px 0px -7px;\n        max-height: 34px;\n\n        svg {\n            width: 36px;\n        }\n\n        @media only screen and (max-width: ${WIDTH_TABLET}) {\n            margin: 2px 20px 0 20px;\n        }\n        @media only screen and (max-width: ${WIDTH_MOBILE}) {\n            font-size: 18px;\n            margin: 2px 10px 0 15px;\n        }\n    }\n\n    .timecost {\n        font-size: 14px;\n        margin: 0 0 26px 0;\n        opacity: 0.6;\n\n        @media only screen and (max-width: ${WIDTH_TABLET}) {\n            margin: 0 20px 0 20px;\n            text-align: right;\n            min-width: 88px;\n            .hideMobile {\n                display: none;\n            }\n            .displayMobile {\n                display: block;\n            }\n        }\n        @media only screen and (max-width: ${WIDTH_TABLET}) {\n            margin: 0 15px 0 10px;\n        }\n    }\n\n    .price {\n        position: relative;\n        font-size: 50px;\n        margin-bottom: -7px;\n        // text-shadow: 0px 0px 5px rgba(255, 255, 255, 0.15);\n\n        strong {\n            opacity: 1;\n            &.loading {\n                opacity: 0;\n            }\n        }\n        \n\n        @media only screen and (max-width: ${WIDTH_TABLET}) {\n            font-size: 38px;\n            flex: 1 1;\n            display: flex;\n            justify-content: flex-end;\n            margin-bottom: 0px;\n        }\n        @media only screen and (max-width: ${WIDTH_MOBILE}) {\n            font-size: 30px;\n        }\n    }\n    \n    &.rapid {\n        border: 1px solid ${convertHexToRGBA(color.green, 0.2)};\n        .label svg {\n            fill: ${color.green};\n        }\n\n        .mode-dark & {\n            border: 1px solid ${convertHexToRGBA(color.greenDark, 0.2)};\n            .label svg {\n                fill: ${color.green};\n                stroke-width: 18px;\n                stroke: ${color.sectionBackgroundDark};\n            }\n        }\n\n        .price {\n            color: ${color.green};\n            .mode-dark & {\n                color: ${color.green};\n            }\n        }\n    }\n    &.fast {\n        border: 1px solid ${convertHexToRGBA(color.orange, 0.8)};\n        .label svg {\n            fill: ${color.orange};\n        }\n\n        .mode-dark & {\n            border: 1px solid ${convertHexToRGBA(color.orangeDark, 0.8)};\n            .label svg {\n                fill: ${color.orangeDark};\n            }\n        }\n\n        .price {\n            color: ${color.orange};\n            .mode-dark & {\n                color: ${color.orangeDark};\n            }\n        }\n    }\n    &.standard {\n        border: 1px solid ${convertHexToRGBA(color.blue, 0.2)};\n        .label svg {\n            fill: ${color.blue};\n        }\n\n        .mode-dark & {\n            border: 1px solid ${convertHexToRGBA(color.blueDark, 0.2)};\n            .label svg {\n                fill: ${color.blueDark};\n            }\n        }\n\n        .price {\n            color: ${color.blue};\n            .mode-dark & {\n                color: ${color.blueDark};\n            }\n        }\n    }\n    &.slow {\n        border: 1px solid ${convertHexToRGBA(color.purple, 0.2)};\n        .label svg {\n            fill: ${color.purple};\n        }\n\n        .mode-dark & {\n            border: 1px solid ${convertHexToRGBA(color.purpleDark, 0.2)};\n            .label svg {\n                fill: ${color.purpleDark};\n            }\n        }\n\n        .price {\n            color: ${color.purple};\n            .mode-dark & {\n                color: ${color.purpleDark};\n            }\n        }\n    }\n\n    .mode-dark & {\n        background: ${color.sectionBackgroundDark};\n    }\n`;","import React, { useEffect, useState } from 'react';\nimport { keyframes } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { Timer } from './';\nimport { \n    color, \n    StyledSectionTitle,\n    WIDTH_MOBILE,\n    useLocale\n} from '../util';\nimport { \n    useAppSelector, \n    selectBlockStats\n} from '../redux';\n\nexport function BlockInfo() {\n    const locale = useLocale();\n    const [timeLastBlock, setTimeLastBlock] = useState(0);\n    const [timeLastUpdate, setTimeLastUpdate] = useState(0);\n\n    const state = useAppSelector(selectBlockStats);\n    const {\n        txLenEst,\n        txLenKnown,\n        block\n    } = state;\n\n    useEffect(() => {\n        let blockTimerLast = setInterval(() => {\n            setTimeLastBlock((time) => time + 10);\n        }, 10);\n\n        let updateTimerLast = setInterval(() => {\n            setTimeLastUpdate((time) => time + 10);\n        }, 10);\n\n        return () => {\n            clearInterval(blockTimerLast);\n            clearInterval(updateTimerLast);\n        };\n    }, []);\n\n    useEffect(() => {\n        setTimeLastBlock(0);\n    }, [block]);\n\n    useEffect(() => {\n        setTimeLastUpdate(0);\n    }, [state]);\n\n    \n    const indicatorHeight = (!!txLenEst && !!txLenKnown) ? Math.ceil(txLenKnown / txLenEst * 100) : 0;\n\n    return (\n        <>\n            <StyledTxIndicator className={timeLastBlock > 15000 && txLenKnown === txLenEst ? 'waiting' : ''} height={indicatorHeight} />\n            <StyledZIndex>\n                <div className=\"blockNumber\">\n                    <StyledSectionTitle>\n                        {locale.nextBlock}\n                    </StyledSectionTitle>\n                    <StyledBlockNumber>\n                        <strong>{block}</strong>\n                    </StyledBlockNumber>\n                </div>\n                <StyledFraction>\n                    <div className=\"numerator\">\n                        <span className=\"label\">{locale.knownTx}</span>\n                        <span className={txLenKnown === txLenEst ? 'equal': ''}>{txLenKnown}</span>\n                    </div> \n                    <div className=\"sep\"></div>\n                    <div className=\"denominator\">\n                        <span className=\"label\">{locale.estTx}</span>\n                        <span className={txLenKnown === txLenEst ? 'equal': ''}>{txLenEst}</span>\n                    </div>\n                </StyledFraction>\n                \n                <StyledTimers>\n                    <div className=\"timer-wrap\">\n                        <span className=\"label\">{locale.lastBlock}</span>\n                        <span className={timeLastBlock > 15000 ? 'waiting' : ''}>\n                            <Timer time={timeLastBlock} />\n                        </span>\n                    </div>\n                    <div className=\"timer-wrap\">\n                        <span className=\"label\">{locale.lastUpdate}</span>\n                        <span><Timer time={timeLastUpdate} /></span>\n                    </div>\n                </StyledTimers>\n                \n            </StyledZIndex>\n        </>\n    );\n};\n\nconst StyledTimers = styled.div`\n    width: 100%;\n\n    span {\n        &.label {\n            font-size: 14px;\n            opacity: 0.5;\n        }\n        &.waiting {\n            transition: color 0.1s linear 0s;\n            color: ${color.orange};\n        }\n    }\n\n    .dark-mode & span.waiting {\n        color: ${color.orangeDark};\n    }\n\n    div.timer-wrap {\n        margin-top: 4px;\n        display: flex;\n        flex-direction: row;\n        flex-wrap: no-wrap;\n        justify-content: space-between;\n        align-items: center;\n    }\n\n    @media only screen and (max-width: ${WIDTH_MOBILE}) {\n        margin-top: 20px;\n        margin-right: 140px;\n        max-width: 160px;\n    }\n\n    @media only screen and (max-width: 400px) {\n        margin-right: 10px;\n    }\n`;\n\nconst StyledFraction = styled.div`\n    font-size: 16px;\n    text-align: right;\n    max-width: 126px;\n\n    .dark-mode & {\n        span.equal {\n            color: ${color.orangeDark};\n        }\n    }\n\n    span {\n        &.label {\n            opacity: 0.5;\n            font-size: 14px;\n            margin-right: 10px;\n        }\n        &.equal {\n            transition: color 0.1s linear 0s;\n            color: ${color.orange};\n        }\n\n        span {\n            text-align: right;\n        }\n    }\n\n    .sep {\n        width: 100%;\n        height: 1px;\n        margin: 8px auto 6px;\n\n        background: rgba(0,0,0,.1);\n\n        .mode-dark & {\n            background: rgba(255,255,255,.1);\n        }\n    }\n\n    @media only screen and (max-width: ${WIDTH_MOBILE}) {\n        margin-left: 50px;\n    }\n`;\n\nconst StyledBlockNumber = styled.div`\n    color: ${color.orange};\n    margin-top: 5px;\n    font-size: 24px;\n    text-align: center;\n\n    .dark-mode & {\n        ${color.orangeDark};\n    }\n`;\n\nconst StyledZIndex = styled.div`\n    position: relative;\n    height: 100%;\n    z-index: 1;\n    display: flex;\n    flex-direction: column;\n    flex-wrap: nowrap;\n    justify-content: space-between;\n    align-items: center;\n    align-content: center;\n\n    @media only screen and (max-width: ${WIDTH_MOBILE}) {\n        flex-direction: row;\n        flex-wrap: wrap;\n    }\n`;\n\nconst AnimIndicatorDone = keyframes`\n    100% {\n        opacity: 0;\n    }\n    // 100% {\n    //     background: ${color.blue};\n    // }\n`;\n\nconst StyledTxIndicator = styled.div<{height: number}>`\n    transition: all 0.2s linear 0s, opacity 0.8s ease 0s;\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    z-index: 0;\n    pointer-events: none;\n    width: 100%;\n    height: ${({height}) => height}%;\n    background: ${color.orange};\n    opacity: 0.15;\n\n    &.waiting {\n        opacity: 0;\n        // animation: ${AnimIndicatorDone} 1.3s ease infinite;\n    }\n\n    @media only screen and (max-width: ${WIDTH_MOBILE}) {\n        height: 100%;\n        width: ${({height}) => height}%;\n    }\n`;","import React from 'react';\nimport styled from '@emotion/styled';\nimport { LogoTweet } from '../asset';\nimport {\n    color, \n    useLocale,\n    WIDTH_MOBILE\n} from '../util';\nimport { \n    useAppSelector, \n    selectEthPriceUsd\n} from '../redux';\n\nexport function EthPriceSocial() {\n    const locale = useLocale();\n    const usdPrice = useAppSelector(selectEthPriceUsd);\n\n    return (\n        <StyledEthSocialContainer>\n            <span className=\"price\">\n                {`${locale.eth}: ${usdPrice ?? '(ERROR)'} USD`}\n            </span>\n            <StyledSocial>\n                <a href=\"https://twitter.com/stab_io\" target=\"_blank\" rel=\"noreferrer\">\n                    <LogoTweet />\n                </a>\n            </StyledSocial>\n        </StyledEthSocialContainer>\n    );\n}\n\n\nconst StyledEthSocialContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: no-wrap;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0 0 12px;\n    margin: 0 auto;\n    max-width: 89%;\n\n    .price {\n        font-size: 14px;\n        opacity: 0.6;\n    }\n\n    @media only screen and (max-width: ${WIDTH_MOBILE}) {\n        padding-bottom: 9px;\n    }\n`;\n\nconst StyledSocial = styled.div`\n    max-width: 300px;\n\n    svg {\n        max-width: 34px;\n        max-height: 34px;\n    }\n\n    a {\n        .bg {\n            fill: ${color.fontDark};\n            stroke: ${color.socialBlue};\n            stroke-width: 1.5px;\n        }\n\n        .birb {\n            fill: ${color.socialBlue};\n        }\n\n        &:hover {\n            .birb {\n                fill: ${color.background};\n            }\n            .bg {\n                fill: url(#hover-gradient-light);\n            }\n        }\n    }\n\n    .mode-dark & {\n        .bg {\n            fill: ${color.backgroundDark};\n        }\n\n        &:hover {\n            .birb {\n                fill: ${color.fontDark};\n            }\n            .bg {\n                fill: url(#hover-gradient-dark);\n            }\n        }\n    }\n`;","import React, { useState } from 'react';\nimport styled from '@emotion/styled';\nimport { \n  colorMode,\n  LogoStab,\n  LogoTitle\n} from './asset';\nimport { \n  prefersColorMode, \n  toggleColorMode, \n  color, \n  StyledCenter,\n  // StyledSection,\n  StyledColumn,\n  StyledColumnWrapper,\n  WIDTH_MOBILE,\n  useLocale\n} from './util';\nimport {\n  GasAverage,\n  GasCounts,\n  // GasDollarCosts,\n  GasHistorical,\n  GasStats,\n  BlockInfo,\n  EthPriceSocial,\n} from './component';\n\n\nfunction App() {\n  const locale = useLocale();\n  const [colorModePref, setColorModePref] = useState(prefersColorMode());\n\n  return (\n    <StyledApp className={`mode-${colorModePref}`}>\n      <Header>\n        <StyledCenter>\n          <HeaderInner>\n            <div className=\"logo\">\n              <span className=\"logo-img\">\n                <LogoStab />\n              </span>\n              <span className=\"logo-title\">\n                <LogoTitle />\n              </span>\n              <span className=\"logo-description\">{locale.header}</span>\n            </div>\n            \n            <ThemeToggle>\n              <div onClick={() => setColorModePref(toggleColorMode())}>\n                {colorMode()}\n              </div>\n            </ThemeToggle>\n          </HeaderInner>\n        </StyledCenter>\n      </Header>\n\n      <StyledCenter>\n        <GasStats />\n        <EthPriceSocial />\n        <StyledColumnWrapper>\n          <StyledColumn className=\"one-third\">\n            <BlockInfo />\n          </StyledColumn>\n          <StyledColumn className=\"two-third\">\n            <StyledGasCounts colorModePref={colorModePref} />\n          </StyledColumn>\n        </StyledColumnWrapper>\n\n        {/* <StyledSection>\n          <GasDollarCosts />\n        </StyledSection> */}\n        \n        <GasHistorical colorModePref={colorModePref} />\n        <GasAverage colorModePref={colorModePref} />\n      </StyledCenter>\n      <StyledFooter>\n        &#169; {new Date().getFullYear()} stab\n      </StyledFooter>\n    </StyledApp>\n  );\n}\n\n\nconst StyledApp = styled.div`\n  position: relative;\n  display: inline-block;\n  min-height: 100%;\n  width: 100%;\n  min-width: 350px;\n  background: ${color.background};\n  color: ${color.font};\n  min-height: 100%;\n\n  &.mode-dark {\n    background: ${color.backgroundDark};\n    color: ${color.fontDark};\n  }\n`;\n\nconst Header = styled.header`\n  box-sizing: border-box; \n  position: relative;\n  width: 100%;\n  height: 54px;\n  background: ${color.header};\n  box-shadow: 0px -11px 26px 7px rgba(0,0,0,0.15);\n\n  .mode-dark & {\n    background: ${color.headerDark};\n    box-shadow: 0px -12px 26px 7px rgba(0,0,0,0.15);\n  }\n`;\n\nconst StyledGasCounts = styled(GasCounts)`\n  height: 100%;\n  width: 100%;\n`;\n\nconst HeaderInner = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: no-wrap;\n  justify-content: space-between;\n  align-items: center;\n\n  .logo {\n    margin-top: 2px;\n    display: flex;\n    flex-direction: row;\n    flex-wrap: no-wrap;\n    justify-content: space-between;\n    align-items: center;\n\n    span {\n      display: inline-block;\n    }\n  }\n\n  .logo-img {\n    svg {\n      path {\n        fill: url(#gradient);\n      }\n\n      .start {\n        stop-color: ${color.orange};\n\n        .mode-dark & {\n          stop-color: ${color.blueDark};\n        }\n      }\n      .end {\n        stop-color: ${color.blue};\n\n        .mode-dark & {\n          stop-color: ${color.orangeDark};\n        }\n      }\n    }\n  }\n\n  .logo-title {\n    font-size: 13px;\n    margin-left: 5px;\n\n    svg {\n      max-height: 22px;\n      max-width: 60px;\n      width: auto;\n\n      path {\n        fill: url(#gradient2);\n      }\n\n      .start {\n        stop-color: ${color.orange};\n\n        .mode-dark & {\n          stop-color: ${color.blueDark};\n        }\n      }\n      .end {\n        stop-color: ${color.blue};\n\n        .mode-dark & {\n          stop-color: ${color.orangeDark};\n        }\n      }\n    }\n  }\n  \n  .logo-description {\n    opacity: 0.6;\n    margin-left: 10px;\n    padding-left: 8px;\n    border-left: 1px solid rgba(0,0,0,.1);\n\n    @media only screen and (max-width: ${WIDTH_MOBILE}) {\n      display: none !important;\n    }\n\n    .mode-dark & {\n      border-left: 1px solid rgba(255,255,255,.2);\n    }\n  }\n\n  svg {\n    height: 38px;\n    width: 38px;\n    &.pos {\n      margin: 0 0 0 -12px;\n    }\n    fill: ${color.font};\n\n    .mode-dark & {\n      fill: ${color.fontDark};\n    }\n  }\n`;\n\nconst ThemeToggle = styled.div`\n  transition: all 0.1s linear 0s;\n  position: relative;\n  width: 26px;\n  height: 26px;\n  cursor: pointer;\n\n  div {\n    position: relative;\n    height: 100%;\n    width: 100%;\n  }\n\n  svg {\n    fill: ${color.font};\n    height: 100%;\n    width: 100%;\n\n    .mode-dark & {\n      fill: ${color.fontDark};\n    }\n  }\n\n  &:hover {\n    opacity: 0.9;\n  }\n  &:active {\n    opacity: 0.8;\n  }\n`;\n\nconst StyledFooter = styled.div`\n  text-align: center;\n  color ${color.font};\n  opacity: 0.35;\n  font-size: 12px;\n  margin: 40px 0 38px;\n\n  .mode-dark & {\n    color: ${color.fontDark};\n  }\n`;\n\nexport default App;\n","import React from 'react';\n\nexport function colorMode() {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n            <path d=\"M7.5,2C5.71,3.15 4.5,5.18 4.5,7.5C4.5,9.82 5.71,11.85 7.53,13C4.46,13 2,10.54 2,7.5A5.5,5.5 0 0,1 7.5,2M19.07,3.5L20.5,4.93L4.93,20.5L3.5,19.07L19.07,3.5M12.89,5.93L11.41,5L9.97,6L10.39,4.3L9,3.24L10.75,3.12L11.33,1.47L12,3.1L13.73,3.13L12.38,4.26L12.89,5.93M9.59,9.54L8.43,8.81L7.31,9.59L7.65,8.27L6.56,7.44L7.92,7.35L8.37,6.06L8.88,7.33L10.24,7.36L9.19,8.23L9.59,9.54M19,13.5A5.5,5.5 0 0,1 13.5,19C12.28,19 11.15,18.6 10.24,17.93L17.93,10.24C18.6,11.15 19,12.28 19,13.5M14.6,20.08L17.37,18.93L17.13,22.28L14.6,20.08M18.93,17.38L20.08,14.61L22.28,17.15L18.93,17.38M20.08,12.42L18.94,9.64L22.28,9.88L20.08,12.42M9.63,18.93L12.4,20.08L9.87,22.27L9.63,18.93Z\" />\n        </svg>\n    );\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './asset/font/Roboto-Bold.woff2';\nimport './asset/font/Roboto-Bold.woff';\nimport './asset/font/Roboto-Regular.woff2';\nimport './asset/font/Roboto-Regular.woff';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Sentry from '@sentry/react';\nimport { Integrations } from '@sentry/tracing';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@csstools/normalize.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './redux';\nimport { WebsocketProvider } from './component';\n\nif (process.env.REACT_APP_ENABLE_SENTRY) {\n  Sentry.init({\n    dsn: 'https://0fce8c13e1ab4a28afc9f633a479a67e@o336313.ingest.sentry.io/5428975',\n    integrations: [new Integrations.BrowserTracing()],\n    tracesSampleRate: 1.0,\n  });\n} \n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n      <WebsocketProvider />\n    </Provider>,\n  document.getElementById('root')\n);\n\nconsole.log(`\n███████╗████████╗ █████╗ ██████╗    ██╗ ██████╗ \n██╔════╝╚══██╔══╝██╔══██╗██╔══██╗   ██║██╔═══██╗\n███████╗   ██║   ███████║██████╔╝   ██║██║   ██║\n╚════██║   ██║   ██╔══██║██╔══██╗   ██║██║   ██║\n███████║   ██║   ██║  ██║██████╔╝██╗██║╚██████╔╝\n╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═════╝ ╚═╝╚═╝ ╚═════╝ \nETH Gas Price Forecast System\n\nhttps://twitter.com/stab_io\n\n`);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}