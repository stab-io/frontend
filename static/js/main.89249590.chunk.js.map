{"version":3,"sources":["asset/logo-title.tsx","asset/logo-stab.tsx","asset/logo-gas-slow.tsx","asset/logo-gas-standard.tsx","asset/logo-gas-fast.tsx","asset/logo-gas-rapid.tsx","util/color-palette.ts","util/color-mode.ts","util/style-common.tsx","component/timer.tsx","redux/slice/sliceGasStats.ts","redux/slice/sliceGasCounts.ts","redux/slice/sliceEthPrice.ts","redux/store.ts","redux/hook.ts","component/websocket-provider.tsx","component/gas-average.tsx","component/gas-counts.tsx","component/gas-historical.tsx","component/gas-stats.tsx","component/block-info.tsx","App.tsx","util/use-window-size.tsx","asset/color-mode.tsx","reportWebVitals.ts","index.tsx"],"names":["LogoTitle","width","height","viewBox","fill","xmlns","id","x2","y2","className","offset","d","LogoStab","LogoGasSlow","x","y","transform","LogoGasStandard","LogoGasFast","LogoGasRapid","color","convertHexToRGBA","hexCode","opacity","hex","replace","length","r","parseInt","substring","g","b","LS_KEY","WIDTH_TABLET","WIDTH_MOBILE","StyledCenter","styled","div","StyledSectionTitle","StyledSectionDescription","StyledColumnWrapper","StyledColumn","Timer","time","Math","floor","slice","sliceGasStats","createSlice","name","initialState","baseFeeGas","block","gasFast","gasRapid","gasSlow","gasStandard","txLenEst","txLenKnown","reducers","update","state","action","payload","updateGasStats","actions","selectGasStats","gasStats","selectBlockStats","reducerGasStats","reducer","sliceGasCounts","updateGasCounts","selectGasCounts","gasCounts","reducerGasCounts","sliceEthPrice","usd","_state","updateEthPrice","selectEthPriceUsd","ethPrice","reducerEthPrice","store","configureStore","useAppSelector","useSelector","logSocketError","err","console","error","WebsocketProvider","dispatch","useDispatch","useState","socketUrl","lastMessage","useWebSocket","useEffect","message","data","isTrusted","JSON","parse","log","t","parseMessageData","map","gasPrice","count","c","GasAverage","ChartWrapper","StyledOverflow","StyledSvg","svg","GasHistorical","GasStats","calculateTransferCost","gasPriceGwei","toFixed","txCostRapid","setTxCostRapid","txCostFast","setTxCostFast","txCostStandard","setTxCostStandard","txCostSlow","setTxCostSlow","document","title","GasPriceWrapper","GasPriceList","GasPrice","BlockInfo","timeLastBlock","setTimeLastBlock","timeLastUpdate","setTimeLastUpdate","blockTimerLast","setInterval","updateTimerLast","clearInterval","indicatorHeight","ceil","StyledTxIndicator","StyledZIndex","StyledBlockNumber","StyledFraction","StyledTimers","AnimIndicatorDone","keyframes","StyledApp","Header","header","StyledGasCounts","colorModePref","useTooltip","tooltipData","tooltipLeft","tooltipTop","tooltipOpen","showTooltip","hideTooltip","labelColor","lineColor","setWidth","enableHighTxFilter","cumulativeState","setCumulativeState","setRawState","chartType","ref","useRef","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","windowWidth","cumulativeCount","cumulativeStateUnfiltered","reverse","averageGasPrice","reduce","a","cumulativeStateFiltered","filter","s","current","offsetWidth","tooltipStylesFast","defaultStyles","background","border","boxShadow","tooltipStyles","maxWidth","margin","xMax","yMax","getGasPrice","getTxCount","bisectGasPrice","bisector","left","gasPriceScale","useMemo","scaleLinear","range","domain","extent","txCountScale","nice","handleTooltip","useCallback","event","localPoint","x0","invert","workingState","index","d0","d1","valueOf","Group","top","LinearGradient","from","to","fromOpacity","toOpacity","rotate","AreaClosed","yScale","strokeWidth","stroke","curve","curveMonotoneX","Bar","rx","onTouchStart","onTouchMove","onMouseMove","onMouseLeave","AxisLeft","hideAxisLine","hideTicks","numTicks","scale","tickLabelProps","fontSize","textAnchor","AxisBottom","tickStroke","undefined","Line","pointerEvents","strokeDasharray","TooltipWithBounds","style","random","HeaderInner","ThemeToggle","App","savedPref","localStorage","getItem","matchMedia","matches","setItem","prefersColorMode","setColorModePref","onClick","toggleColorMode","xmlnsXlink","version","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.89249590.chunk.js","sourcesContent":["import React from 'react';\n\nexport function LogoTitle() {\n    return (\n        <svg width=\"105\" height=\"38\" viewBox=\"0 0 105 38\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <linearGradient id=\"gradient2\" x2=\"0%\" y2=\"100%\">\n                <stop className=\"start\" offset=\"0%\"/>\n                <stop className=\"end\" offset=\"100%\"/>\n            </linearGradient>\n            <path d=\"M1.37201 37.668L5.08001 33.78H13.972L17.464 37.668H1.37201ZM18.616 36.084L14.728 32.376V23.52L18.616 19.992V36.084ZM4.46801 21.288C3.62801 20.616 2.77601 19.956 1.91201 19.308L4.46801 17.4H14.296L16.816 19.308L14.296 21.288H4.46801ZM1.33601 1.09201H17.428L13.864 4.98001H5.04401L1.33601 1.09201ZM0.184006 18.732V2.64001L4.07201 6.13201V15.06L0.184006 18.732Z\" fill=\"black\"/>\n            <path d=\"M40.173 36.084L36.285 32.376V23.52L40.173 19.992V36.084ZM27.141 4.33201C26.301 3.66001 25.461 3.02401 24.621 2.42401L27.141 0.480011H49.245L51.765 2.42401L49.245 4.33201H40.065V18.732L36.177 15.24V6.34801L38.301 4.33201H27.141Z\" fill=\"black\"/>\n            <path d=\"M57.8779 19.992L61.7659 23.736V32.556L57.8779 36.084V19.992ZM76.2019 36.084L72.3139 32.376V23.52L76.2019 19.992V36.084ZM62.0539 21.288C61.2139 20.616 60.3619 19.956 59.4979 19.308L62.0539 17.4H71.8819L74.4019 19.308L71.8819 21.288H62.0539ZM58.9219 1.09201H75.0139L71.4499 4.98001H62.6299L58.9219 1.09201ZM57.7699 18.732V2.64001L61.6579 6.13201V15.06L57.7699 18.732ZM76.0939 2.64001V18.732L72.2059 15.24V6.34801L76.0939 2.64001Z\" fill=\"black\"/>\n            <path d=\"M87.7509 37.668L91.4589 33.78H100.351L103.843 37.668H87.7509ZM86.6709 19.992L90.5589 23.736V32.556L86.6709 36.084V19.992ZM104.995 36.084L101.107 32.376V23.52L104.995 19.992V36.084ZM90.8469 21.288C90.0069 20.616 89.1549 19.956 88.2909 19.308L90.8469 17.4H100.675L103.195 19.308L100.675 21.288H90.8469ZM87.7149 1.09201H103.807L100.243 4.98001H91.4229L87.7149 1.09201ZM86.5629 18.732V2.64001L90.4509 6.13201V15.06L86.5629 18.732ZM104.887 2.64001V18.732L100.999 15.24V6.34801L104.887 2.64001Z\" fill=\"black\"/>\n        </svg>\n    );\n}","import React from 'react';\n\nexport function LogoStab() {\n    return (\n        <svg width=\"371\" height=\"327\" viewBox=\"0 0 371 327\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <linearGradient id=\"gradient\" x2=\"0%\" y2=\"100%\">\n                <stop className=\"start\" offset=\"0%\"/>\n                <stop className=\"end\" offset=\"100%\"/>\n            </linearGradient>\n            <path fill=\"url(#gradient)\" d=\"M99.5 0.78125L0.28125 167.469L99.5 227L198.719 167.469L99.5 0.78125ZM0.28125 187.312L99.5 326.219L198.719 187.312L99.5 246.844L0.28125 187.312Z\" />\n            <path fill=\"url(#gradient)\" d=\"M266.288 47.4293L254.681 59.0366L266.288 70.644L254.681 82.2513L266.288 93.8586L254.681 105.466L266.288 117.073L254.681 128.681L266.288 140.288L254.681 151.895L266.288 163.503L243.073 186.717L231.466 175.11L208.251 198.325L243.073 233.146L254.681 221.539L277.895 244.754L266.288 256.361L277.895 267.968L254.681 291.183L289.502 326.005L324.324 291.183L301.11 267.968L312.717 256.361L301.11 244.754L324.324 221.539L335.932 233.146L370.754 198.325L347.539 175.11L335.932 186.717L312.717 163.503L324.324 151.895L312.717 140.288L324.324 128.681L312.717 117.073L324.324 105.466L312.717 93.8586L324.324 82.2513L312.717 70.644L324.324 59.0366L312.717 47.4293L324.324 35.822L289.502 1L254.681 35.822L266.288 47.4293ZM312.717 47.4293L301.11 59.0366L312.717 70.644L301.11 82.2513L312.717 93.8586L301.11 105.466L312.717 117.073L301.11 128.681L312.717 140.288L301.11 151.895L312.717 163.503L289.502 186.717L301.11 198.325L312.717 186.717L324.324 198.325L335.932 186.717L347.539 198.325L324.324 221.539L312.717 209.932L289.502 233.146L301.11 244.754L289.502 256.361L301.11 267.968L289.502 279.576L301.11 291.183L289.502 302.79L277.895 291.183L289.502 279.576L277.895 267.968L289.502 256.361L277.895 244.754L289.502 233.146L266.288 209.932L254.681 221.539L231.466 198.325L243.073 186.717L254.681 198.325L266.288 186.717L277.895 198.325L289.502 186.717L266.288 163.503L277.895 151.895L266.288 140.288L277.895 128.681L266.288 117.073L277.895 105.466L266.288 93.8586L277.895 82.2513L266.288 70.644L277.895 59.0366L266.288 47.4293L289.502 24.2147L312.717 47.4293Z\" />\n        </svg>\n    );\n}","import React from 'react';\n\nexport function LogoGasSlow() {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1100 1100\">\n            <path d=\"M224.8,755.93h98.5l40.18-40.19L325,677.24l-40.83,40.83a298.77,298.77,0,0,1-34.48-140c0-5.59.17,6.42.47.88h67.15V524.53H258.12c12-49.61,36.54-112.94,72.05-151l46.62,46.62,38.5-38.5-44.55-44.55A297.33,297.33,0,0,1,521,279.15V343.2h54.45V278.85a297.46,297.46,0,0,1,156.78,60.5L690,381.62l38.5,38.5,43.89-43.89c33.94,37.31,57.52,99.33,69.3,147.43H781.83V578.1h68c.34,5.83.53-5.88.53,0a298.79,298.79,0,0,1-33.88,138.82L775.9,676.37l-38.5,38.49,41.06,41.07h96.73A370.28,370.28,0,0,0,812,316.06q-13.15-13.14-27.4-24.82l-2.14-2.14-.23.23A370.58,370.58,0,0,0,224.8,755.93Z\"/>\n            <rect x=\"319.92\" y=\"823.1\" width=\"456.64\" height=\"69.37\" transform=\"translate(1096.49 1715.58) rotate(180)\"/>\n            <path d=\"M495.4,559.49,365.15,615,508,616a55.32,55.32,0,1,0-12.59-56.54Z\"/>\n        </svg>\n    );\n}","import React from 'react';\n\nexport function LogoGasStandard() {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1100 1100\">\n            <path d=\"M224.8,755.93h98.5l40.18-40.19L325,677.24l-40.83,40.83a298.77,298.77,0,0,1-34.48-140c0-5.59.17,6.42.47.88h67.15V524.53H258.12c12-49.61,36.54-112.94,72.05-151l46.62,46.62,38.5-38.5-44.55-44.55A297.33,297.33,0,0,1,521,279.15V343.2h54.45V278.85a297.46,297.46,0,0,1,156.78,60.5L690,381.62l38.5,38.5,43.89-43.89c33.94,37.31,57.52,99.33,69.3,147.43H781.83V578.1h68c.34,5.83.53-5.88.53,0a298.79,298.79,0,0,1-33.88,138.82L775.9,676.37l-38.5,38.49,41.06,41.07h96.73A370.28,370.28,0,0,0,812,316.06q-13.15-13.14-27.4-24.82l-2.14-2.14-.23.23A370.58,370.58,0,0,0,224.8,755.93Z\"/>\n            <rect x=\"319.92\" y=\"823.1\" width=\"456.64\" height=\"69.37\" transform=\"translate(1096.49 1715.58) rotate(180)\"/>\n            <path d=\"M576.19,530.55,547.37,391.93,518.28,531.79a55.33,55.33,0,1,0,57.91-1.24Z\"/>\n        </svg>\n    );\n}","import React from 'react';\n\nexport function LogoGasFast() {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1100 1100\">\n            <path d=\"M224.8,755.93h98.5l40.18-40.19L325,677.24l-40.83,40.83a298.77,298.77,0,0,1-34.48-140c0-5.59.17,6.42.47.88h67.15V524.53H258.12c12-49.61,36.54-112.94,72.05-151l46.62,46.62,38.5-38.5-44.55-44.55A297.33,297.33,0,0,1,521,279.15V343.2h54.45V278.85a297.46,297.46,0,0,1,156.78,60.5L690,381.62l38.5,38.5,43.89-43.89c33.94,37.31,57.52,99.33,69.3,147.43H781.83V578.1h68c.34,5.83.53-5.88.53,0a298.79,298.79,0,0,1-33.88,138.82L775.9,676.37l-38.5,38.49,41.06,41.07h96.73A370.28,370.28,0,0,0,812,316.06q-13.15-13.14-27.4-24.82l-2.14-2.14-.23.23A370.58,370.58,0,0,0,224.8,755.93Z\"/>\n            <rect x=\"319.92\" y=\"823.1\" width=\"456.64\" height=\"69.37\" transform=\"translate(1096.49 1715.58) rotate(180)\"/>\n            <path d=\"M596.12,608.14l138.62-28.83L594.88,550.22a55.32,55.32,0,1,0,1.24,57.92Z\"/>\n        </svg>\n    );\n}","import React from 'react';\n\nexport function LogoGasRapid() {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1100 1100\">\n            <rect x=\"319.92\" y=\"823.1\" width=\"456.64\" height=\"69.37\" transform=\"translate(1096.49 1715.58) rotate(180)\"/>\n            <path d=\"M567.77,631.45l126.81,63-92-109.26a55.32,55.32,0,1,0-34.8,46.3Z\"/>\n            <path d=\"M891.44,433.84A369.21,369.21,0,0,0,812,316.06q-13.15-13.14-27.4-24.82l-2.14-2.14-.23.23a369.42,369.42,0,0,0-167.66-76.21C579.53,162.34,485.87,114.21,413,108,240.59,93.3,68.22,59.48,73,39,59.66,96.16,108,185,193,203c123.86,26.23,65,79,42,94,0,0-88.27,60.46-73-22,5-27,3.81-50.72-89-77,71.35,67.11-44.08,160.13,115.89,296.43a370.23,370.23,0,0,0,35.91,261.5h98.5l40.18-40.19L325,677.24l-40.83,40.83a298.77,298.77,0,0,1-34.48-140c0-5.59.17,6.42.47.88h67.15V524.53H258.12c12-49.61,36.54-112.94,72.05-151l46.62,46.62,38.5-38.5-44.55-44.55A297.33,297.33,0,0,1,521,279.15V343.2h54.45V278.85a297.46,297.46,0,0,1,156.78,60.5L690,381.62l38.5,38.5,43.89-43.89c33.94,37.31,57.52,99.33,69.3,147.43H781.83V578.1h68c.34,5.83.53-5.88.53,0a298.79,298.79,0,0,1-33.88,138.82L775.9,676.37l-38.5,38.49,41.06,41.07h96.73a371.32,371.32,0,0,0,16.25-322.09Z\"/>\n        </svg>\n    );\n}","export const color = {\n    font: '#333333',\n    fontDark: '#fbfbfb',\n    background: '#f9f6f6',\n    backgroundDark: '#0f1011',\n    header: '#ffffff',\n    headerDark: '#181a1b',\n    sectionBackground: '#ffffff',\n    sectionBackgroundDark: '#181a1b',\n    green: '#00c718',\n    greenDark: '#41ff58',\n    orange: '#ff7828',\n    orangeDark: '#f67a30',\n    blue: '#0060ff',\n    blueDark: '#339aff',\n    purple: '#9160f2',\n    purpleDark: '#9161f2',\n    badgeBackground: '#ebebeb',\n    badgeBackgroundDark: '#303132'\n};\n\n\nexport const convertHexToRGBA = (hexCode: string, opacity: number) => {\n    let hex = hexCode.replace('#', '');\n    \n    if (hex.length === 3) {\n        hex = `${hex[0]}${hex[0]}${hex[1]}${hex[1]}${hex[2]}${hex[2]}`;\n    }    \n    \n    const r = parseInt(hex.substring(0, 2), 16);\n    const g = parseInt(hex.substring(2, 4), 16);\n    const b = parseInt(hex.substring(4, 6), 16);\n\n    return `rgba(${r},${g},${b},${opacity})`;\n};","const LS_KEY = 'colorPref';\n\n/**\n * get color pref from localStorage, else get it from user preferences then set it as such\n * @returns string\n */\nexport function prefersColorMode() {\n    const savedPref = localStorage.getItem(LS_KEY);\n    if (savedPref === 'light' || savedPref === 'dark') {\n        return savedPref;\n    } else {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            localStorage.setItem(LS_KEY, 'dark');\n            return 'dark';\n        } else {\n            localStorage.setItem(LS_KEY, 'light');\n            return 'light';\n        }\n    }\n}\n\n\nexport function toggleColorMode() {\n    const savedPref = localStorage.getItem(LS_KEY);\n\n    if (savedPref === 'light') {\n        localStorage.setItem(LS_KEY, 'dark');\n        return 'dark';\n    } else if (savedPref === 'dark') {\n        localStorage.setItem(LS_KEY, 'light');\n        return 'light';\n    } else if (!savedPref) {\n        localStorage.setItem(LS_KEY, 'dark');\n    }\n    \n    return 'dark';\n}","import styled from '@emotion/styled';\nimport { color } from './';\n\nexport const WIDTH_TABLET = '768px';\nexport const WIDTH_MOBILE = '640px';\n\nexport const StyledCenter = styled.div`\n    width: 100%;\n    height: 100%;\n    max-width: 1200px;\n    padding: 0 15px;\n    margin: 0 auto 16px auto;\n`;\n\nexport const StyledSection = styled.div`\n    padding: 30px;\n    margin-top: 15px;\n    border-radius: 6px;\n\n    background: ${color.sectionBackground};\n\n    .mode-dark & {\n        background: ${color.sectionBackgroundDark};\n    }\n`;\n\nexport const StyledSectionTitle = styled.div`\n    text-align: center;\n    font-size: 22px;\n    display: block;\n\n    &.pad-top {\n        margin-top: 40px;\n    }\n`;\n\nexport const StyledSectionDescription = styled.div`\n    margin-top: 8px;\n    text-align: center;\n    opacity: 0.5;\n    font-size: 14px;\n    display: block;\n`;\n\nexport const StyledColumnWrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    justify-content: flex-start;\n    align-items: stretch;\n\n    @media only screen and (max-width: ${WIDTH_MOBILE}) {\n        flex-direction: column;\n    }\n`;\n\nexport const StyledColumn = styled.div`\n    padding: 30px;\n    order: 0;\n    background: ${color.sectionBackground};\n    margin-top: 15px;\n    border-radius: 6px;\n\n    .mode-dark & {\n        background: ${color.sectionBackgroundDark};\n    }\n\n    &.one-third {\n        position: relative;\n        overflow: hidden;\n        max-width: 240px;\n        min-width: 230px;\n        flex: 1 1 auto;\n        align-self: auto;\n\n        @media only screen and (max-width: ${WIDTH_MOBILE}) {\n            flex: 0 1 auto;\n            max-width: none;\n        }\n    }\n    &.two-third {\n        margin-left: 15px;\n        padding: 30px 20px;\n        flex: 2 1 auto;\n        align-self: auto;\n        overflow: hidden;\n\n        @media only screen and (max-width: ${WIDTH_MOBILE}) {\n            flex: 0 1 auto;\n            margin-left: 0px;\n        }\n    }\n`;","import React from 'react';\n\ntype TimerOptions = {\n    readonly time: number;\n}\n\nexport function Timer({ time }: TimerOptions) {\n    return (\n        <div className=\"timer\">\n            <span className=\"digits\">\n                {(\"0\" + Math.floor((time / 60000) % 60)).slice(-2)}:\n            </span>\n            <span className=\"digits\">\n                {(\"0\" + Math.floor((time / 1000) % 60)).slice(-2)}.\n            </span>\n            <span className=\"digits mili-sec\">\n                {(\"0\" + ((time / 10) % 100)).slice(-2)}\n            </span>\n        </div>\n    );\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport type { RootState } from '../store';\n\n// Types\ntype GasStatsState = {\n    readonly baseFeeGas: number;\n    readonly block: number;\n    readonly gasFast: number;\n    readonly gasRapid: number;\n    readonly gasSlow: number;\n    readonly gasStandard: number;\n    readonly txLenEst: number;\n    readonly txLenKnown: number;\n};\n\n// Initial State\nconst initialState = {\n    baseFeeGas: 0,\n    block: 0,\n    gasFast: 0,\n    gasRapid: 0,\n    gasSlow: 0,\n    gasStandard: 0,\n    txLenEst: 0,\n    txLenKnown: 0,\n} as GasStatsState;\n\nexport const sliceGasStats = createSlice({\n    name: 'gasStats',\n    // `createSlice` will infer the state type from the `initialState` argument\n    initialState,\n    reducers: {\n        // Use the PayloadAction type to declare the contents of `action.payload`\n        update: (state, action: PayloadAction<GasStatsState>) => {\n            return action.payload;\n        },\n    },\n});\n\nexport const { update: updateGasStats } = sliceGasStats.actions;\nexport const selectGasStats = (state: RootState) => state.gasStats;\nexport const selectBlockStats = (state: RootState) => {\n    return {\n        txLenEst: state.gasStats.txLenEst,\n        txLenKnown: state.gasStats.txLenKnown,\n        block: state.gasStats.block\n    }\n};\nexport const { reducer: reducerGasStats } = sliceGasStats;\n\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport type { RootState } from '../store';\n\n// Types\ntype GasCountsState = {\n    readonly gasPrice: number;\n    readonly count: number;\n}[];\n\n// Initial State\nconst initialState = [] as GasCountsState;\n\nexport const sliceGasCounts = createSlice({\n    name: 'gasCounts',\n    // `createSlice` will infer the state type from the `initialState` argument\n    initialState,\n    reducers: {\n        // Use the PayloadAction type to declare the contents of `action.payload`\n        update: (state, action: PayloadAction<GasCountsState>) => {\n            return action.payload;\n        },\n    },\n});\n\nexport const { update: updateGasCounts } = sliceGasCounts.actions;\nexport const selectGasCounts = (state: RootState) => state.gasCounts;\nexport const { reducer: reducerGasCounts } = sliceGasCounts;\n\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport type { RootState } from '../store';\n\n// Types\ntype EthPriceState = {\n    readonly usd: number;\n};\n\n// Initial State\nconst initialState = { usd: 0 } as EthPriceState;\n\nexport const sliceEthPrice = createSlice({\n    name: 'ethPrice',\n    // `createSlice` will infer the state type from the `initialState` argument\n    initialState,\n    reducers: {\n        // Use the PayloadAction type to declare the contents of `action.payload`\n        update: (_state, action: PayloadAction<EthPriceState>) => {\n            return action.payload;\n        },\n    },\n}); \n\nexport const { update: updateEthPrice } = sliceEthPrice.actions;\nexport const selectEthPriceUsd = (state: RootState) => state.ethPrice.usd;\nexport const { reducer: reducerEthPrice } = sliceEthPrice;\n\n","import { configureStore } from '@reduxjs/toolkit';\nimport {\n    reducerGasStats,\n    reducerGasCounts,\n    reducerEthPrice\n} from './slice';\n\nexport const store = configureStore({\n    reducer: {\n        gasStats: reducerGasStats,\n        gasCounts: reducerGasCounts,\n        ethPrice: reducerEthPrice\n    }\n})\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import React, { useState, useEffect } from 'react';\nimport useWebSocket/*, { ReadyState }*/ from 'react-use-websocket';\nimport { \n    useAppDispatch, \n    updateGasStats,\n    updateGasCounts,\n    updateEthPrice\n} from '../redux';\n\n\nfunction parseMessageData(data: string) {\n    try {\n        data = JSON.parse(data);\n    } catch (err) {\n        console.error('WS Data Parse Error:');\n        console.log(err);\n    }\n    return data;\n};\n\nfunction logSocketError(err: any) {\n    console.error(err);\n}\n\n\nexport function WebsocketProvider() {\n    const dispatch = useAppDispatch();\n    const [socketUrl, ] = useState('wss://api.stab.io/ws/');\n\n    const {\n        // sendMessage,\n        lastMessage,\n        // readyState,\n    } = useWebSocket(socketUrl);\n    \n    // const connectionStatus = {\n    //     [ReadyState.CONNECTING]: 'Connecting',\n    //     [ReadyState.OPEN]: 'Open',\n    //     [ReadyState.CLOSING]: 'Closing',\n    //     [ReadyState.CLOSED]: 'Closed',\n    //     [ReadyState.UNINSTANTIATED]: 'Uninstantiated',\n    // }[readyState];\n\n    // useEffect(() => {\n    //     // console.log(readyState);\n    //     // if (readyState === 1) {\n    //     //     sendMessage('auth');\n    //     // }\n    // }, [readyState]);\n\n    useEffect(() => {\n        let message: any = {};\n        let data: any = {};\n        if (lastMessage !== null && lastMessage.isTrusted && lastMessage.data) {\n            try {\n                message = JSON.parse(lastMessage.data);\n            } catch (err) {\n                console.error('WS Message Parse Error:');\n                console.log(err);\n            }\n\n            if (message.d && message.t) {\n                data = parseMessageData(message.d);\n\n                if (message.t === 'gc') {\n                    dispatch(updateGasCounts(data.map((d: any) => { return {gasPrice: d.g, count: d.c}})));\n                } else if (message.t === 'gs') {\n                    dispatch(updateGasStats(data));\n                } else if (message.t === 'ep') {\n                    dispatch(updateEthPrice(data));\n                } else {\n                    logSocketError(`Invalid WS Message Type: ${lastMessage}`);\n                }\n\n                // console.log(data);\n            } else {\n                logSocketError(`Invalid WS Message Type or Data: ${lastMessage}`);\n            }\n            \n            // find out what type of message\n        } else if (lastMessage !== null) {\n            logSocketError(`Invalid WS Message: ${lastMessage}`);\n        }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [lastMessage]);\n\n\n    // const handleClickSendMessage = useCallback(() =>\n    //     sendMessage('Hello'), []);\n\n    return <></>;\n}","import React from 'react';\n// import styled from '@emotion/styled';\n\nexport function GasAverage() {\n    return <></>;\n}","import React, { useEffect, useState, useMemo, useRef, useCallback } from 'react';\nimport styled from '@emotion/styled';\nimport { useTooltip, TooltipWithBounds, defaultStyles } from '@vx/tooltip';\nimport { localPoint } from '@vx/event';\nimport { AxisBottom, AxisLeft } from '@vx/axis';\nimport { AreaClosed, Line, Bar } from '@vx/shape';\nimport { curveMonotoneX } from '@vx/curve';\nimport { LinearGradient } from '@vx/gradient';\nimport { Group } from '@vx/group';\nimport { scaleLinear } from '@vx/scale';\nimport { extent, bisector } from 'd3-array';\nimport { useWindowSize } from '../util';\n\nimport { \n    color, \n    StyledSectionTitle,\n    StyledSectionDescription\n} from '../util';\nimport { \n    useAppSelector, \n    selectGasCounts,\n    selectGasStats\n} from '../redux';\n\ntype GasCountsType = {\n    readonly colorModePref: string;\n    readonly className?: string;\n}\ntype GasCountItemState = {\n    readonly gasPrice: number;\n    readonly count: number;\n}\n\nexport function GasCounts({className, colorModePref}: GasCountsType) {\n    const {\n        tooltipData,\n        tooltipLeft,\n        tooltipTop,\n        tooltipOpen,\n        showTooltip,\n        hideTooltip,\n    } = useTooltip();\n    const labelColor = colorModePref === 'dark' ? 'rgba(255,255,255,0.5)' : 'rgba(51, 51, 51,0.5)';\n    const lineColor = colorModePref === 'dark' ? 'rgba(255,255,255,0.1)' : 'rgba(51, 51, 51,0.05)';\n    const [width, setWidth] = useState(0);\n    const { gasFast } = useAppSelector(selectGasStats);\n    const state = useAppSelector(selectGasCounts);\n    const [enableHighTxFilter, /*setEnableHighTxFilter*/] = useState(true);\n    const [cumulativeState, setCumulativeState] = useState<GasCountItemState[]>(state);\n    const [/*rawState*/, setRawState] = useState<GasCountItemState[]>(state);\n    const [chartType, /*setChartType*/] = useState<'cumulative' |'instantaneous'>('cumulative');\n\n    const ref = useRef<HTMLHeadingElement>(null);\n    const [windowWidth,] = useWindowSize();\n    \n    useEffect(() => {\n        if (!state || state.length === 0) return;\n        setRawState(state);\n\n        let cumulativeCount = 0;\n        // count up state\n        const cumulativeStateUnfiltered = [...state].reverse().map(({gasPrice, count}) => {\n            cumulativeCount += count;\n            return {\n                gasPrice,\n                count: cumulativeCount\n            }\n        });\n        \n        // get the average gas price\n        const averageGasPrice = Math.ceil([...state].reduce((a, b) => ({\n            gasPrice: a.gasPrice + b.gasPrice,\n            count: 0\n        })).gasPrice / state.length);\n        \n        // filter it out by a factor of 2.5\n        const cumulativeStateFiltered = cumulativeStateUnfiltered.filter((s) => {\n            return s.gasPrice < averageGasPrice * 2\n        });\n        \n        // set either filtered or unfiltered depending on settings\n        setCumulativeState(\n            enableHighTxFilter ? cumulativeStateFiltered : cumulativeStateUnfiltered\n        );\n    }, [state, enableHighTxFilter]);\n\n    useEffect(() => {\n        setWidth(ref.current ? ref.current.offsetWidth : 0);\n    }, [windowWidth]);\n\n    const tooltipStylesFast = {\n        ...defaultStyles,\n        background: 'transparent',\n        border: `1px solid ${lineColor}`,\n        color: colorModePref === 'dark' ? color.orangeDark : color.orange,\n        boxShadow: 'none'\n    };\n\n    const tooltipStyles = {\n        ...defaultStyles,\n        background: colorModePref === 'dark' ? 'rgba(255,255,255,0.1)' : 'rgba(51, 51, 51,0.05)',\n        border: `1px solid ${lineColor}`,\n        maxWidth: `${windowWidth < 640 ? 150 : 300}px`,\n        color: colorModePref === 'dark' ? color.fontDark : color.font,\n        boxShadow: 'none'\n    };\n\n    const height = 230;\n    const margin = {\n        left: 32,\n        right: 15,\n        top: 10,\n        bottom: 20\n    }\n\n    // bounds\n    const xMax = width - margin.left - margin.right;\n    const yMax = height - margin.top - margin.bottom;\n\n    const getGasPrice = (s: GasCountItemState) => s.gasPrice;\n    const getTxCount = (s: GasCountItemState) => s.count;\n    const bisectGasPrice = bisector((s: GasCountItemState) => s.gasPrice).left;\n\n    const gasPriceScale = useMemo(\n        () =>\n            scaleLinear({\n                range: [0, xMax],\n                domain: extent(chartType === 'cumulative' ? cumulativeState : state, getGasPrice) as [number, number]\n            }),\n            [xMax, cumulativeState, chartType, state]\n    );\n\n\n    const txCountScale = useMemo(\n        () =>\n            scaleLinear({\n                range: [yMax, 0],\n                domain: extent(chartType === 'cumulative' ? cumulativeState : state, getTxCount) as [number, number],\n                nice: true,\n            }),\n            [yMax, cumulativeState, chartType, state]\n    );\n\n    // const { containerRef, TooltipInPortal } = useTooltipInPortal({\n    //     detectBounds: true,\n    //     // when tooltip containers are scrolled, this will correctly update the Tooltip position\n    //     scroll: true,\n    //     debounce: 300,\n    //   })\n\n    const handleTooltip = useCallback((event: React.TouchEvent<SVGRectElement> | React.MouseEvent<SVGRectElement>) => {\n        const { x } = localPoint(event) || { x: 0 };\n        const x0 = gasPriceScale.invert(x - margin.left);\n        const workingState = [...cumulativeState].reverse(); // TODO make this dynamic based on state type\n        const index = bisectGasPrice(workingState, x0, 1); \n        const d0 = workingState[index - 1];\n        const d1 = workingState[index];\n\n        let d = d0;\n        if (d1 && getGasPrice(d1)) {\n          d = x0.valueOf() - getGasPrice(d0).valueOf() > getGasPrice(d1).valueOf() - x0.valueOf() ? d1 : d0;\n        }\n\n        showTooltip({\n            tooltipLeft: x - margin.left,\n            tooltipTop: txCountScale(getTxCount(d)),\n            tooltipData: `${d.count} txs with gas price \n            above ${d.gasPrice} Gwei`\n        });\n    }, [showTooltip, gasPriceScale, txCountScale, margin.left, cumulativeState, bisectGasPrice]);\n\n    return (\n        <div className={className} ref={ref}>\n            <StyledOverflow>\n                <StyledSectionTitle>Pending Transactions</StyledSectionTitle>\n                <StyledSectionDescription>\n                    X axis: Gas Price (Gwei), Y axis: Cumulative number of transactions\n                </StyledSectionDescription>\n            </StyledOverflow>\n            <ChartWrapper>\n                <StyledSvg width={width} height={height}>\n                    <Group left={margin.left} top={margin.top}>\n                        <LinearGradient \n                            id=\"area-gradient\" \n                            from={color.blue} \n                            to={color.greenDark} \n                            fromOpacity={0.1}\n                            toOpacity={colorModePref === 'dark' ? 0.8 : 0.9}\n                            rotate={-90} \n                        />    \n                        <AreaClosed\n                            data={chartType === 'cumulative' ? cumulativeState : state}\n                            // @ts-ignore\n                            x={d => gasPriceScale(getGasPrice(d))}\n                            // @ts-ignore\n                            y={d => txCountScale(getTxCount(d))}\n                            yScale={txCountScale}\n                            strokeWidth={1}\n                            stroke=\"url(#area-gradient)\"\n                            fill=\"url(#area-gradient)\"\n                            curve={curveMonotoneX}\n                        />\n                        <Bar\n                            x={0}\n                            y={0}\n                            width={xMax}\n                            height={yMax}\n                            fill=\"transparent\"\n                            rx={14}\n                            // @ts-ignore\n                            onTouchStart={handleTooltip}\n                            // @ts-ignore\n                            onTouchMove={handleTooltip}\n                            // @ts-ignore\n                            onMouseMove={handleTooltip}\n                            // @ts-ignore\n                            onMouseLeave={() => hideTooltip()}\n                        />\n                        <AxisLeft\n                            hideAxisLine\n                            hideTicks\n                            numTicks={2}\n                            left={-8}\n                            scale={txCountScale}\n                            // tickFormat={formatDate}\n                            tickLabelProps={() => ({\n                                fill: labelColor,\n                                fontSize: 11,\n                                textAnchor: 'middle',\n                            })}\n                        />\n                        <AxisBottom\n                            top={yMax}\n                            scale={gasPriceScale}\n                            stroke={labelColor}\n                            tickStroke={labelColor}\n                            numTicks={width <= 480 ? 6 : undefined}\n                            tickLabelProps={() => ({\n                                fill: labelColor,\n                                fontSize: 11,\n                                textAnchor: 'middle',\n                            })}\n                        />\n                        {!!gasPriceScale(gasFast) && (\n                            <Line\n                                from={{ x: gasPriceScale(gasFast), y: 0 }}\n                                to={{ x: gasPriceScale(gasFast), y: yMax }}\n                                stroke={colorModePref === 'dark' ? color.orangeDark : color.orange}\n                                strokeWidth={1}\n                                pointerEvents=\"none\"\n                            />\n                        )}\n                        <Line\n                            from={{ x: 0, y: 0 }}\n                            to={{ x: xMax, y: 0 }}\n                            stroke={lineColor}\n                            strokeWidth={2}\n                            pointerEvents=\"none\"\n                            strokeDasharray=\"5,4\"\n                        />\n                        {tooltipOpen && (\n                            <g>\n                                <Line\n                                    from={{ x: tooltipLeft, y: 0 }}\n                                    to={{ x: tooltipLeft, y: yMax }}\n                                    stroke={labelColor}\n                                    strokeWidth={2}\n                                    pointerEvents=\"none\"\n                                    strokeDasharray=\"5,4\"\n                                />\n                            </g>\n                        )}\n                    </Group>\n                </StyledSvg>\n                {!!gasPriceScale(gasFast) && (\n                    <TooltipWithBounds\n                        top={windowWidth > 640 ? 30 : 30}\n                        left={(gasPriceScale(gasFast) || 0) + 30}\n                        key={Math.random()}\n                        style={tooltipStylesFast}\n                        // stroke={colorModePref === 'dark' ? color.orangeDark : color.orange}\n                    >\n                        Fast\n                    </TooltipWithBounds>\n                )}\n                {tooltipOpen && (\n                    <TooltipWithBounds\n                        // set this to random so it correctly updates with parent bounds\n                        key={Math.random()}\n                        top={(tooltipTop || 0) - 30}\n                        left={(tooltipLeft || 0) + 30}\n                        style={tooltipStyles}\n                    >\n                        {tooltipData}\n                    </TooltipWithBounds>\n                )}\n            </ChartWrapper>\n        </div>\n    );\n}\n\nconst ChartWrapper = styled.div`\n    position: relative;\n    height: 100%;\n    width: 100%;\n`;\n\nconst StyledOverflow = styled.div`\n    overflow: auto;\n`;\n\nconst StyledSvg = styled.svg`\n    height: 230px;\n    margin: 18px auto -8px;\n`;\n\n","import React from 'react';\n// import styled from '@emotion/styled';\n\nexport function GasHistorical() {\n    return <></>;\n}","import React, { useEffect, useState } from 'react';\nimport styled from '@emotion/styled';\nimport { \n    color, \n    convertHexToRGBA,\n    StyledSectionTitle,\n    StyledSectionDescription,\n    WIDTH_TABLET,\n    WIDTH_MOBILE\n} from '../util';\nimport { \n    LogoGasSlow,\n    LogoGasStandard,\n    LogoGasFast,\n    LogoGasRapid\n  } from '../asset';\nimport { \n    useAppSelector, \n    selectGasStats,\n    selectEthPriceUsd\n} from '../redux';\n\nexport function GasStats() {\n    const transferCostGas = 21000;\n    function calculateTransferCost(gasPriceGwei: number, ethPrice: number) { \n        return (((transferCostGas * gasPriceGwei) / 1000000000) * ethPrice).toFixed(2);\n    }\n\n    const {\n        gasRapid,\n        gasFast,\n        gasStandard,\n        gasSlow\n    } = useAppSelector(selectGasStats);\n    const ethPrice = useAppSelector(selectEthPriceUsd);\n    const [txCostRapid, setTxCostRapid] = useState(calculateTransferCost(gasRapid, ethPrice));\n    const [txCostFast, setTxCostFast] = useState(calculateTransferCost(gasFast, ethPrice));\n    const [txCostStandard, setTxCostStandard] = useState(calculateTransferCost(gasStandard, ethPrice));\n    const [txCostSlow, setTxCostSlow] = useState(calculateTransferCost(gasSlow, ethPrice));\n\n    useEffect(() => {\n        setTxCostRapid(calculateTransferCost(gasRapid, ethPrice));\n        setTxCostFast(calculateTransferCost(gasFast, ethPrice));\n        setTxCostStandard(calculateTransferCost(gasStandard, ethPrice));\n        setTxCostSlow(calculateTransferCost(gasSlow, ethPrice));\n\n        document.title = `${gasRapid}-${gasSlow} Gwei | STAB | ETH Gas Price Forecast System`;\n    }, [\n        gasRapid,\n        gasFast,\n        gasStandard,\n        gasSlow, \n        ethPrice\n    ]);\n\n    return (\n        <>\n            <StyledSectionTitle className=\"pad-top\">Gas Price (Gwei)</StyledSectionTitle> \n            <StyledSectionDescription>Based On Pending Transaction of ETH Mempool</StyledSectionDescription>\n\n            <GasPriceWrapper>\n                <GasPriceList>\n                    <GasPrice className=\"rapid\">\n                        <div className=\"label\">\n                            <span><LogoGasRapid /></span>\n                            <span>Rapid</span>\n                        </div>\n                        <div className=\"price\">\n                            <strong>{gasRapid}</strong>\n                        </div>\n                        <div className=\"timecost\">\n                            ${txCostRapid} | 15 Seconds\n                        </div>\n                    </GasPrice>\n                    <GasPrice className=\"fast\">\n                        <div className=\"label\">\n                            <span><LogoGasFast /></span>\n                            <span>Fast</span>\n                        </div>\n                        <div className=\"price\">\n                            <strong>{gasFast}</strong>\n                        </div>\n                        <div className=\"timecost\">\n                            ${txCostFast} | 1 Minute\n                        </div>\n                    </GasPrice>\n                    <GasPrice className=\"standard\">\n                        <div className=\"label\">\n                            <span><LogoGasStandard /></span>\n                            <span>Standard</span>\n                        </div>\n                        <div className=\"price\">\n                            <strong>{gasStandard}</strong>\n                        </div>\n                        <div className=\"timecost\">\n                            ${txCostStandard} | 3 Minutes\n                        </div>\n                    </GasPrice>\n                    <GasPrice className=\"slow\">\n                        <div className=\"label\">\n                            <span><LogoGasSlow /></span>\n                            <span>Slow</span>\n                        </div>\n                        <div className=\"price\">\n                            <strong>{gasSlow}</strong>\n                        </div>\n                        <div className=\"timecost\">\n                            ${txCostSlow} | &#62;10 Minutes\n                        </div>\n                    </GasPrice>\n                </GasPriceList>\n            </GasPriceWrapper>\n        </>\n    );\n}\n\nconst GasPriceWrapper = styled.div`\n    margin: 0 auto;\n    max-width: 986px;\n    padding-bottom: 50px;\n\n    @media only screen and (max-width: ${WIDTH_MOBILE}) {\n        padding-bottom: 0px;\n    }\n`;\n\nconst GasPriceList = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: no-wrap;\n    justify-content: space-between;\n    align-items: center;\n    margin: 26px 0px 0px;\n\n    @media only screen and (max-width: ${WIDTH_TABLET}) {\n        flex-direction: column;\n    }\n`;\n\nconst GasPrice = styled.div`\n    height: 176px;\n    width: 22.5%;\n    background: ${color.sectionBackground};\n    border-radius: 22px;\n    text-align: center;\n    display: flex;\n    flex-direction: column;\n    flex-wrap: nowrap;\n    justify-content: space-between;\n    align-items: center;\n\n    @media only screen and (max-width: ${WIDTH_TABLET}) {\n        height: 80px;\n        width: 80%;\n        margin-bottom: 12px;\n        flex-direction: row;\n\n        &:last-child {\n            margin-bottom: 2px;\n        }\n    }\n\n    @media only screen and (max-width: ${WIDTH_MOBILE}) {\n        width: 100%;\n    }\n\n    \n\n    .label {\n        font-size: 24px;\n        display: flex;\n        flex-direction: row;\n        flex-wrap: no-wrap;\n        justify-content: center;\n        align-items: center;\n        margin: 26px 0px -7px;\n        max-height: 34px;\n\n        svg {\n            width: 36px;\n        }\n\n        @media only screen and (max-width: ${WIDTH_TABLET}) {\n            margin: 2px 20px 0 20px;\n        }\n        @media only screen and (max-width: ${WIDTH_MOBILE}) {\n            font-size: 18px;\n            margin: 2px 10px 0 15px;\n        }\n    }\n\n    .timecost {\n        font-size: 14px;\n        margin: 0 0 26px 0;\n        opacity: 0.6;\n\n        @media only screen and (max-width: ${WIDTH_TABLET}) {\n            margin: 0 20px 0 20px;\n            flex: 1 1;\n            text-align: right;\n        }\n        @media only screen and (max-width: ${WIDTH_TABLET}) {\n            margin: 0 15px 0 10px;\n        }\n    }\n\n    .price {\n        font-size: 50px;\n        // text-shadow: 0px 0px 5px rgba(255, 255, 255, 0.15);\n\n        @media only screen and (max-width: ${WIDTH_TABLET}) {\n            font-size: 38px;\n        }\n        @media only screen and (max-width: ${WIDTH_MOBILE}) {\n            font-size: 28px;\n        }\n    }\n    \n    &.rapid {\n        border: 1px solid ${convertHexToRGBA(color.green, 0.2)};\n        .label svg {\n            fill: ${color.green};\n        }\n\n        .mode-dark & {\n            border: 1px solid ${convertHexToRGBA(color.greenDark, 0.2)};\n            .label svg {\n                fill: ${color.green};\n                stroke-width: 18px;\n                stroke: ${color.sectionBackgroundDark};\n            }\n        }\n\n        .price {\n            color: ${color.green};\n            .mode-dark & {\n                color: ${color.green};\n            }\n        }\n    }\n    &.fast {\n        border: 1px solid ${convertHexToRGBA(color.orange, 0.8)};\n        .label svg {\n            fill: ${color.orange};\n        }\n\n        .mode-dark & {\n            border: 1px solid ${convertHexToRGBA(color.orangeDark, 0.8)};\n            .label svg {\n                fill: ${color.orangeDark};\n            }\n        }\n\n        .price {\n            color: ${color.orange};\n            .mode-dark & {\n                color: ${color.orangeDark};\n            }\n        }\n    }\n    &.standard {\n        border: 1px solid ${convertHexToRGBA(color.blue, 0.2)};\n        .label svg {\n            fill: ${color.blue};\n        }\n\n        .mode-dark & {\n            border: 1px solid ${convertHexToRGBA(color.blueDark, 0.2)};\n            .label svg {\n                fill: ${color.blueDark};\n            }\n        }\n\n        .price {\n            color: ${color.blue};\n            .mode-dark & {\n                color: ${color.blueDark};\n            }\n        }\n    }\n    &.slow {\n        border: 1px solid ${convertHexToRGBA(color.purple, 0.2)};\n        .label svg {\n            fill: ${color.purple};\n        }\n\n        .mode-dark & {\n            border: 1px solid ${convertHexToRGBA(color.purpleDark, 0.2)};\n            .label svg {\n                fill: ${color.purpleDark};\n            }\n        }\n\n        .price {\n            color: ${color.purple};\n            .mode-dark & {\n                color: ${color.purpleDark};\n            }\n        }\n    }\n\n    .mode-dark & {\n        background: ${color.sectionBackgroundDark};\n    }\n`;","import React, { useEffect, useState } from 'react';\nimport { keyframes } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { Timer } from './';\nimport { \n    color, \n    StyledSectionTitle,\n    WIDTH_MOBILE\n} from '../util';\nimport { \n    useAppSelector, \n    selectBlockStats\n} from '../redux';\n\nexport function BlockInfo() {\n    const [timeLastBlock, setTimeLastBlock] = useState(0);\n    const [timeLastUpdate, setTimeLastUpdate] = useState(0);\n\n    const state = useAppSelector(selectBlockStats);\n    const {\n        txLenEst,\n        txLenKnown,\n        block\n    } = state;\n\n    useEffect(() => {\n        let blockTimerLast = setInterval(() => {\n            setTimeLastBlock((time) => time + 10);\n        }, 10);\n\n        let updateTimerLast = setInterval(() => {\n            setTimeLastUpdate((time) => time + 10);\n        }, 10);\n\n        return () => {\n            clearInterval(blockTimerLast);\n            clearInterval(updateTimerLast);\n        };\n    }, []);\n\n    useEffect(() => {\n        setTimeLastBlock(0);\n    }, [block]);\n\n    useEffect(() => {\n        setTimeLastUpdate(0);\n    }, [state]);\n\n    \n    const indicatorHeight = (!!txLenEst && !!txLenKnown) ? Math.ceil(txLenKnown / txLenEst * 100) : 0;\n\n    return (\n        <>\n            <StyledTxIndicator className={timeLastBlock > 15000 && txLenKnown === txLenEst ? 'waiting' : ''} height={indicatorHeight} />\n            <StyledZIndex>\n                <div className=\"blockNumber\">\n                    <StyledSectionTitle>\n                        Next Block\n                    </StyledSectionTitle>\n                    <StyledBlockNumber>\n                        <strong>{block}</strong>\n                    </StyledBlockNumber>\n                </div>\n                <StyledFraction>\n                    <div className=\"numerator\">\n                        <span className=\"label\">Known tx:</span>\n                        <span className={txLenKnown === txLenEst ? 'equal': ''}>{txLenKnown}</span>\n                    </div> \n                    <div className=\"sep\"></div>\n                    <div className=\"denominator\">\n                        <span className=\"label\">Est. tx:</span>\n                        <span className={txLenKnown === txLenEst ? 'equal': ''}>{txLenEst}</span>\n                    </div>\n                </StyledFraction>\n                \n                <StyledTimers>\n                    <div className=\"timer-wrap\">\n                        <span className=\"label\">Last block:</span>\n                        <span className={timeLastBlock > 15000 ? 'waiting' : ''}>\n                            <Timer time={timeLastBlock} />\n                        </span>\n                    </div>\n                    <div className=\"timer-wrap\">\n                        <span className=\"label\">Last update:</span>\n                        <span><Timer time={timeLastUpdate} /></span>\n                    </div>\n                </StyledTimers>\n                \n            </StyledZIndex>\n        </>\n    );\n};\n\nconst StyledTimers = styled.div`\n    width: 100%;\n\n    span {\n        &.label {\n            font-size: 14px;\n            opacity: 0.5;\n        }\n        &.waiting {\n            transition: color 0.1s linear 0s;\n            color: ${color.orange};\n        }\n    }\n\n    .dark-mode & span.waiting {\n        color: ${color.orangeDark};\n    }\n\n    div.timer-wrap {\n        margin-top: 4px;\n        display: flex;\n        flex-direction: row;\n        flex-wrap: no-wrap;\n        justify-content: space-between;\n        align-items: center;\n    }\n\n    @media only screen and (max-width: ${WIDTH_MOBILE}) {\n        margin-top: 20px;\n        margin-right: 140px;\n        max-width: 160px;\n    }\n\n    @media only screen and (max-width: 400px) {\n        margin-right: 10px;\n    }\n`;\n\nconst StyledFraction = styled.div`\n    font-size: 16px;\n    text-align: right;\n    max-width: 126px;\n\n    .dark-mode & {\n        span.equal {\n            color: ${color.orangeDark};\n        }\n    }\n\n    span {\n        &.label {\n            opacity: 0.5;\n            font-size: 14px;\n            margin-right: 10px;\n        }\n        &.equal {\n            transition: color 0.1s linear 0s;\n            color: ${color.orange};\n        }\n\n        span {\n            text-align: right;\n        }\n    }\n\n    .sep {\n        width: 100%;\n        height: 1px;\n        margin: 8px auto 6px;\n\n        background: rgba(0,0,0,.1);\n\n        .mode-dark & {\n            background: rgba(255,255,255,.1);\n        }\n    }\n\n    @media only screen and (max-width: ${WIDTH_MOBILE}) {\n        margin-left: 50px;\n    }\n`;\n\nconst StyledBlockNumber = styled.div`\n    color: ${color.orange};\n    margin-top: 5px;\n    font-size: 24px;\n    text-align: center;\n\n    .dark-mode & {\n        ${color.orangeDark};\n    }\n`;\n\nconst StyledZIndex = styled.div`\n    position: relative;\n    height: 100%;\n    z-index: 1;\n    display: flex;\n    flex-direction: column;\n    flex-wrap: nowrap;\n    justify-content: space-between;\n    align-items: center;\n    align-content: center;\n\n    @media only screen and (max-width: ${WIDTH_MOBILE}) {\n        flex-direction: row;\n        flex-wrap: wrap;\n    }\n`;\n\nconst AnimIndicatorDone = keyframes`\n    100% {\n        opacity: 0;\n    }\n    // 100% {\n    //     background: ${color.blue};\n    // }\n`;\n\nconst StyledTxIndicator = styled.div<{height: number}>`\n    transition: all 0.2s linear 0s, opacity 0.8s ease 0s;\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    z-index: 0;\n    pointer-events: none;\n    width: 100%;\n    height: ${({height}) => height}%;\n    background: ${color.orange};\n    opacity: 0.15;\n\n    &.waiting {\n        opacity: 0;\n        // animation: ${AnimIndicatorDone} 1.3s ease infinite;\n    }\n\n    @media only screen and (max-width: ${WIDTH_MOBILE}) {\n        height: 100%;\n        width: ${({height}) => height}%;\n    }\n`;","import React, { useState } from 'react';\nimport styled from '@emotion/styled';\nimport { \n  colorMode,\n  LogoStab,\n  LogoTitle\n} from './asset';\nimport { \n  prefersColorMode, \n  toggleColorMode, \n  color, \n  StyledCenter,\n  // StyledSection,\n  StyledColumn,\n  StyledColumnWrapper,\n  WIDTH_MOBILE\n} from './util';\nimport {\n  GasAverage,\n  GasCounts,\n  // GasDollarCosts,\n  GasHistorical,\n  GasStats,\n  BlockInfo\n} from './component';\n\n\nfunction App() {\n  const [colorModePref, setColorModePref] = useState(prefersColorMode());\n\n  return (\n    <StyledApp className={`mode-${colorModePref}`}>\n      <Header>\n        <StyledCenter>\n          <HeaderInner>\n            <div className=\"logo\">\n              <span className=\"logo-img\">\n                <LogoStab />\n              </span>\n              <span className=\"logo-title\">\n                <LogoTitle />\n              </span>\n              <span className=\"logo-description\">ETH Gas Price Forecast System</span>\n            </div>\n            \n            <ThemeToggle>\n              <div onClick={() => setColorModePref(toggleColorMode())}>\n                {colorMode()}\n              </div>\n            </ThemeToggle>\n          </HeaderInner>\n        </StyledCenter>\n      </Header>\n\n      <StyledCenter>\n        <GasStats />\n        <StyledColumnWrapper>\n          <StyledColumn className=\"one-third\">\n            <BlockInfo />\n          </StyledColumn>\n          <StyledColumn className=\"two-third\">\n            <StyledGasCounts colorModePref={colorModePref} />\n          </StyledColumn>\n        </StyledColumnWrapper>\n\n        {/* <StyledSection>\n          <GasDollarCosts />\n        </StyledSection> */}\n        \n        <GasHistorical />\n        <GasAverage />\n      </StyledCenter>\n\n    </StyledApp>\n  );\n}\n\n\nconst StyledApp = styled.div`\n  position: relative;\n  display: inline-block;\n  min-height: 100%;\n  width: 100%;\n  min-width: 350px;\n  background: ${color.background};\n  color: ${color.font};\n  min-height: 100%;\n\n  &.mode-dark {\n    background: ${color.backgroundDark};\n    color: ${color.fontDark};\n  }\n`;\n\nconst Header = styled.header`\n  box-sizing: border-box; \n  position: relative;\n  width: 100%;\n  height: 54px;\n  background: ${color.header};\n  box-shadow: 0px -11px 26px 7px rgba(0,0,0,0.15);\n\n  .mode-dark & {\n    background: ${color.headerDark};\n    box-shadow: 0px -12px 26px 7px rgba(0,0,0,0.15);\n  }\n`;\n\nconst StyledGasCounts = styled(GasCounts)`\n  height: 100%;\n  width: 100%;\n`;\n\nconst HeaderInner = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: no-wrap;\n  justify-content: space-between;\n  align-items: center;\n\n  .logo {\n    margin-top: 2px;\n    display: flex;\n    flex-direction: row;\n    flex-wrap: no-wrap;\n    justify-content: space-between;\n    align-items: center;\n\n    span {\n      display: inline-block;\n    }\n  }\n\n  .logo-img {\n    svg {\n      path {\n        fill: url(#gradient);\n      }\n\n      .start {\n        stop-color: ${color.orange};\n\n        .mode-dark & {\n          stop-color: ${color.blueDark};\n        }\n      }\n      .end {\n        stop-color: ${color.blue};\n\n        .mode-dark & {\n          stop-color: ${color.orangeDark};\n        }\n      }\n    }\n  }\n\n  .logo-title {\n    font-size: 13px;\n    margin-left: 5px;\n\n    svg {\n      max-height: 22px;\n      max-width: 60px;\n      width: auto;\n\n      path {\n        fill: url(#gradient2);\n      }\n\n      .start {\n        stop-color: ${color.orange};\n\n        .mode-dark & {\n          stop-color: ${color.blueDark};\n        }\n      }\n      .end {\n        stop-color: ${color.blue};\n\n        .mode-dark & {\n          stop-color: ${color.orangeDark};\n        }\n      }\n    }\n  }\n  \n  .logo-description {\n    opacity: 0.6;\n    margin-left: 10px;\n    padding-left: 8px;\n    border-left: 1px solid rgba(0,0,0,.1);\n\n    @media only screen and (max-width: ${WIDTH_MOBILE}) {\n      display: none !important;\n    }\n\n    .mode-dark & {\n      border-left: 1px solid rgba(255,255,255,.2);\n    }\n  }\n\n  svg {\n    height: 38px;\n    width: 38px;\n    &.pos {\n      margin: 0 0 0 -12px;\n    }\n    fill: ${color.font};\n\n    .mode-dark & {\n      fill: ${color.fontDark};\n    }\n  }\n`;\n\nconst ThemeToggle = styled.div`\n  transition: all 0.1s linear 0s;\n  position: relative;\n  width: 26px;\n  height: 26px;\n  cursor: pointer;\n\n  div {\n    position: relative;\n    height: 100%;\n    width: 100%;\n  }\n\n  svg {\n    fill: ${color.font};\n    height: 100%;\n    width: 100%;\n\n    .mode-dark & {\n      fill: ${color.fontDark};\n    }\n  }\n\n  &:hover {\n    opacity: 0.9;\n  }\n  &:active {\n    opacity: 0.8;\n  }\n`;\n\nexport default App;\n","import { useState, useLayoutEffect } from 'react';\n\nexport function useWindowSize() {\n    const [size, setSize] = useState([0, 0]);\n    useLayoutEffect(() => {\n      function updateSize() {\n        setSize([window.innerWidth, window.innerHeight]);\n      }\n      window.addEventListener('resize', updateSize);\n      updateSize();\n      return () => window.removeEventListener('resize', updateSize);\n    }, []);\n    return size;\n}","import React from 'react';\n\nexport function colorMode() {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n            <path d=\"M7.5,2C5.71,3.15 4.5,5.18 4.5,7.5C4.5,9.82 5.71,11.85 7.53,13C4.46,13 2,10.54 2,7.5A5.5,5.5 0 0,1 7.5,2M19.07,3.5L20.5,4.93L4.93,20.5L3.5,19.07L19.07,3.5M12.89,5.93L11.41,5L9.97,6L10.39,4.3L9,3.24L10.75,3.12L11.33,1.47L12,3.1L13.73,3.13L12.38,4.26L12.89,5.93M9.59,9.54L8.43,8.81L7.31,9.59L7.65,8.27L6.56,7.44L7.92,7.35L8.37,6.06L8.88,7.33L10.24,7.36L9.19,8.23L9.59,9.54M19,13.5A5.5,5.5 0 0,1 13.5,19C12.28,19 11.15,18.6 10.24,17.93L17.93,10.24C18.6,11.15 19,12.28 19,13.5M14.6,20.08L17.37,18.93L17.13,22.28L14.6,20.08M18.93,17.38L20.08,14.61L22.28,17.15L18.93,17.38M20.08,12.42L18.94,9.64L22.28,9.88L20.08,12.42M9.63,18.93L12.4,20.08L9.87,22.27L9.63,18.93Z\" />\n        </svg>\n    );\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@csstools/normalize.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './redux';\nimport { WebsocketProvider } from './component';\n\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n      <WebsocketProvider />\n    </Provider>,\n  document.getElementById('root')\n);\n\nconsole.log(`\n███████╗████████╗ █████╗ ██████╗    ██╗ ██████╗ \n██╔════╝╚══██╔══╝██╔══██╗██╔══██╗   ██║██╔═══██╗\n███████╗   ██║   ███████║██████╔╝   ██║██║   ██║\n╚════██║   ██║   ██╔══██║██╔══██╗   ██║██║   ██║\n███████║   ██║   ██║  ██║██████╔╝██╗██║╚██████╔╝\n╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═════╝ ╚═╝╚═╝ ╚═════╝ \nETH Gas Price Forecast System\n\nhttps://twitter.com/stab_io\n\n`);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}